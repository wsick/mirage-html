{"version":3,"sources":["_version.ts","Binder.ts","BinderRegistry.ts","DOMMonitor.ts","PanelInserter.ts","TreeSynchronizer.ts","TreeTracker.ts"],"names":["mirage","mirage.html","mirage.html.NewBinder","mirage.html.NewBinder.updateSlots","mirage.html.NewBinder.getElementSize","mirage.html.NewBinder.getRoot","mirage.html.NewBinder.setRoot","mirage.html.NewBinder.run","mirage.html.NewBinderRegistry","mirage.html.NewBinderRegistry.findHoistCandidate","mirage.html.NewBinderRegistry.hoist","mirage.html.NewBinderRegistry.create","mirage.html.NewBinderRegistry.adjustDestroyed","mirage.html.NewBinderRegistry.update","mirage.html.isMirageElement","mirage.html.NewDOMMonitor","mirage.html.NewDOMMonitor.start","mirage.html.NewDOMMonitor.stop","mirage.html.NewPanelInserter","mirage.html.NewPanelInserter.add","mirage.html.NewPanelInserter.commit","mirage.html.NewTreeSynchronizer","mirage.html.NewTreeSynchronizer.mirrorAdded","mirage.html.NewTreeSynchronizer.mirrorUntagged","mirage.html.NewTreeSynchronizer.mirrorRemoved","mirage.html.NewTreeSynchronizer.register","mirage.html.NewTreeSynchronizer.deregister","mirage.html.NewTreeSynchronizer.promoteChildren","mirage.html.NewTreeSynchronizer.mirrorAncestry","mirage.html.NewTreeSynchronizer.configAncestors","mirage.html.NewTreeSynchronizer.update","mirage.html.NewTreeSynchronizer.start","mirage.html.NewTreeSynchronizer.stop","mirage.html.NewTreeTracker","mirage.html.NewTreeTracker.add","mirage.html.NewTreeTracker.removeElement","mirage.html.NewTreeTracker.elementExists","mirage.html.NewTreeTracker.getNodeByElement","mirage.html.NewTreeTracker.getElementByNode","mirage.html.getNodeUid"],"mappings":"AAAA,IAAO,MAAM,CAEZ;AAFD,WAAO,MAAM;IAACA,IAAAA,IAAIA,CAEjBA;IAFaA,WAAAA,IAAIA,EAACA,CAACA;QACLC,YAAOA,GAAGA,OAAOA,CAACA;IACjCA,CAACA,EAFaD,IAAIA,GAAJA,WAAIA,KAAJA,WAAIA,QAEjBA;AAADA,CAACA,EAFM,MAAM,KAAN,MAAM,QAEZ;ACFD,IAAU,MAAM,CA2Df;AA3DD,WAAU,MAAM;IAACA,IAAAA,IAAIA,CA2DpBA;IA3DgBA,WAAAA,IAAIA,EAACA,CAACA;QAenBC,mBAA0BA,IAAkBA;YACxCC,IAAIA,IAAqBA,CAACA;YAC1BA,IAAIA,OAAgBA,CAACA;YACrBA,IAAIA,OAA8BA,CAACA;YACnCA,IAAIA,aAAaA,GAAGA,IAAIA,WAAIA,CAACA,GAAGA,EAAEA,GAAGA,CAACA,CAACA;YAEvCA,IAAIA,OAAOA,GAA+BA;gBACtCA,WAAWA,YAACA,OAA4BA;oBACpCC,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,OAAOA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;wBACtCA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,CAACA,CAACA,CAACA;wBACxBA,IAAIA,EAAEA,GAAGA,IAAIA,CAACA,gBAAgBA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA;oBAEhDA,CAACA;gBACLA,CAACA;aACJD,CAACA;YAEFA,wBAAwBA,EAAWA;gBAC/BE,MAAMA,CAACA,IAAIA,WAAIA,CAACA,EAAEA,CAACA,WAAWA,EAAEA,EAAEA,CAACA,YAAYA,CAACA,CAACA;YACrDA,CAACA;YAEDF,MAAMA,CAACA;gBACHA,OAAOA;oBACHG,MAAMA,CAACA,IAAIA,CAACA;gBAChBA,CAACA;gBACDH,OAAOA,YAACA,IAAqBA;oBACzBI,WAAIA,CAACA,KAAKA,CAACA,aAAaA,CAACA,CAACA;oBAC1BA,IAAIA,GAAGA,IAAIA,CAACA;oBACZA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA,CAACA;wBACRA,OAAOA,GAAGA,IAAIA,CAACA;wBACfA,OAAOA,GAAGA,IAAIA,CAACA;oBACnBA,CAACA;oBAACA,IAAIA,CAACA,CAACA;wBACJA,OAAOA,GAAGA,IAAIA,CAACA,gBAAgBA,CAACA,IAAIA,CAACA,CAACA;wBACtCA,OAAOA,GAAGA,YAAKA,CAACA,UAAUA,CAACA,IAAIA,CAACA,CAACA;oBACrCA,CAACA;gBACLA,CAACA;gBACDJ,GAAGA;oBACCK,IAAIA,QAAQA,GAAGA,cAAcA,CAACA,OAAOA,CAACA,CAACA;oBACvCA,EAAEA,CAACA,CAACA,CAACA,WAAIA,CAACA,OAAOA,CAACA,aAAaA,EAAEA,QAAQA,CAACA,CAACA,CAACA,CAACA;wBACzCA,OAAOA,CAACA,OAAOA,EAAEA,QAAQA,CAACA,CAACA;wBAC3BA,WAAIA,CAACA,MAAMA,CAACA,QAAQA,EAAEA,aAAaA,CAACA,CAACA;oBACzCA,CAACA;gBACLA,CAACA;aACJL,CAACA;QACNA,CAACA;QA3CeD,cAASA,YA2CxBA,CAAAA;IACLA,CAACA,EA3DgBD,IAAIA,GAAJA,WAAIA,KAAJA,WAAIA,QA2DpBA;AAADA,CAACA,EA3DS,MAAM,KAAN,MAAM,QA2Df;AC3DD,IAAU,MAAM,CAgGf;AAhGD,WAAU,MAAM;IAACA,IAAAA,IAAIA,CAgGpBA;IAhGgBA,WAAAA,IAAIA,EAACA,CAACA;QAWnBC,2BAAkCA,IAAkBA,EAAEA,OAAmBA;YACrEO,IAAIA,KAAKA,GAAsBA,EAAEA,CAACA;YAClCA,OAAOA,GAAGA,OAAOA,IAAIA,EAAEA,CAACA;YAGxBA,4BAA4BA,MAAeA;gBACvCC,IAAIA,OAAOA,GAAGA,MAAMA,CAACA,OAAOA,EAAEA,CAACA;gBAC/BA,EAAEA,CAACA,CAACA,CAACA,OAAOA,CAACA;oBACTA,MAAMA,CAACA,IAAIA,CAACA;gBAChBA,IAAIA,OAAOA,GAAGA,OAAOA,CAACA;gBAEtBA,OAAOA,OAAOA,CAACA,IAAIA,CAACA,MAAMA,EAAEA,CAACA;oBACzBA,OAAOA,GAAGA,OAAOA,CAACA,IAAIA,CAACA,MAAMA,CAACA;gBAClCA,CAACA;gBACDA,EAAEA,CAACA,CAACA,OAAOA,KAAKA,OAAOA,CAACA;oBACpBA,MAAMA,CAACA,IAAIA,CAACA;gBAEhBA,EAAEA,CAACA,CAACA,KAAKA,CAACA,OAAOA,CAACA,OAAOA,CAACA,GAAGA,CAACA,CAACA,CAACA;oBAC5BA,MAAMA,CAACA,IAAIA,CAACA;gBAChBA,MAAMA,CAACA,OAAOA,CAACA;YACnBA,CAACA;YAEDD,eAAeA,UAA6BA;gBAKxCE,IAAIA,kBAAkBA,GAAsBA,UAAUA,CAACA,KAAKA,CAACA,CAACA,CAACA,CAACA;gBAChEA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,OAAOA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;oBACtCA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,CAACA,CAACA,CAACA;oBACxBA,IAAIA,OAAOA,GAAGA,kBAAkBA,CAACA,MAAMA,CAACA,CAACA;oBACzCA,EAAEA,CAACA,CAACA,CAACA,OAAOA,CAACA,CAACA,CAACA;wBAEXA,OAAOA,CAACA,MAAMA,CAACA,CAACA,EAAEA,CAACA,CAACA,CAACA;wBACrBA,CAACA,EAAEA,CAACA;wBACJA,QAAQA,CAACA;oBACbA,CAACA;oBACDA,MAAMA,CAACA,OAAOA,CAACA,OAAOA,CAACA,CAACA;oBACxBA,KAAKA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;oBAGpBA,IAAIA,YAAYA,GAAGA,kBAAkBA,CAACA,OAAOA,CAACA,OAAOA,CAACA,CAACA;oBACvDA,EAAEA,CAACA,CAACA,YAAYA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA;wBACpBA,kBAAkBA,CAACA,MAAMA,CAACA,YAAYA,EAAEA,CAACA,CAACA,CAACA;oBAC/CA,CAACA;gBACLA,CAACA;gBACDA,MAAMA,CAACA,kBAAkBA,CAACA;YAC9BA,CAACA;YAEDF,gBAAgBA,KAAwBA;gBACpCG,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,KAAKA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;oBACpCA,IAAIA,IAAIA,GAAGA,KAAKA,CAACA,CAACA,CAACA,CAACA;oBACpBA,IAAIA,MAAMA,GAAGA,cAASA,CAACA,IAAIA,CAACA,CAACA;oBAC7BA,MAAMA,CAACA,OAAOA,CAACA,IAAIA,CAACA,CAACA;oBACrBA,KAAKA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA;oBACjBA,OAAOA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;gBACzBA,CAACA;YACLA,CAACA;YAEDH,yBAAyBA,cAAiCA;gBACtDI,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,OAAOA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;oBACtCA,IAAIA,MAAMA,GAAGA,OAAOA,CAACA,CAACA,CAACA,CAACA;oBACxBA,IAAIA,OAAOA,GAAGA,MAAMA,CAACA,OAAOA,EAAEA,CAACA;oBAC/BA,IAAIA,KAAKA,GAAGA,cAAcA,CAACA,OAAOA,CAACA,OAAOA,CAACA,CAACA;oBAC5CA,EAAEA,CAACA,CAACA,KAAKA,GAAGA,CAACA,CAACA,CAACA,CAACA,CAACA;wBAEbA,OAAOA,CAACA,MAAMA,CAACA,KAAKA,EAAEA,CAACA,CAACA,CAACA;wBACzBA,CAACA,EAAEA,CAACA;wBAEJA,MAAMA,CAACA,OAAOA,CAACA,IAAIA,CAACA,CAACA;wBACrBA,IAAIA,UAAUA,GAAGA,KAAKA,CAACA,OAAOA,CAACA,OAAOA,CAACA,CAACA;wBACxCA,EAAEA,CAACA,CAACA,UAAUA,GAAGA,CAACA,CAACA,CAACA;4BAChBA,KAAKA,CAACA,MAAMA,CAACA,UAAUA,EAAEA,CAACA,CAACA,CAACA;oBACpCA,CAACA;gBACLA,CAACA;YACLA,CAACA;YAEDJ,MAAMA,CAACA;gBACHA,MAAMA,YAACA,UAA6BA,EAAEA,cAAiCA;oBACnEK,IAAIA,kBAAkBA,GAAGA,KAAKA,CAACA,UAAUA,CAACA,CAACA;oBAC3CA,MAAMA,CAACA,kBAAkBA,CAACA,CAACA;oBAC3BA,eAAeA,CAACA,cAAcA,CAACA,CAACA;gBACpCA,CAACA;aACJL,CAACA;QACNA,CAACA;QApFeP,sBAAiBA,oBAoFhCA,CAAAA;IACLA,CAACA,EAhGgBD,IAAIA,GAAJA,WAAIA,KAAJA,WAAIA,QAgGpBA;AAADA,CAACA,EAhGS,MAAM,KAAN,MAAM,QAgGf;AChGD,IAAU,MAAM,CAgFf;AAhFD,WAAU,MAAM;IAACA,IAAAA,IAAIA,CAgFpBA;IAhFgBA,WAAAA,IAAIA,EAACA,CAACA;QAgBnBC,yBAAgCA,IAAUA;YAItCa,MAAMA,CAACA,IAAIA,CAACA,QAAQA,KAAKA,IAAIA,CAACA,YAAYA;mBACnCA,CAACA,CAAWA,IAAKA,CAACA,YAAYA,CAACA,aAAaA,CAACA,CAACA;QACzDA,CAACA;QANeb,oBAAeA,kBAM9BA,CAAAA;QAEDA,uBAA8BA,MAAYA,EAAEA,QAA4BA;YACpEc,IAAIA,QAAQA,GAAGA,IAAIA,gBAAgBA,CAACA,UAAAA,SAASA;gBACzCA,IAAIA,KAAKA,GAAcA,EAAEA,CAACA;gBAC1BA,IAAIA,OAAOA,GAAcA,EAAEA,CAACA;gBAC5BA,IAAIA,QAAQA,GAAcA,EAAEA,CAACA;gBAE7BA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,SAASA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;oBACxCA,IAAIA,QAAQA,GAAGA,SAASA,CAACA,CAACA,CAACA,CAACA;oBAC5BA,EAAEA,CAACA,CAACA,QAAQA,CAACA,IAAIA,KAAKA,WAAWA,CAACA,CAACA,CAACA;wBAChCA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,QAAQA,CAACA,UAAUA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;4BAClDA,IAAIA,EAAEA,GAAGA,QAAQA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA;4BAChCA,EAAEA,CAACA,CAACA,eAAeA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA;gCACtBA,KAAKA,CAACA,IAAIA,CAAUA,EAAEA,CAACA,CAACA;4BAC5BA,CAACA;wBACLA,CAACA;wBACDA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,QAAQA,CAACA,YAAYA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;4BACpDA,IAAIA,EAAEA,GAAGA,QAAQA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA;4BAClCA,EAAEA,CAACA,CAACA,eAAeA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA;gCACtBA,OAAOA,CAACA,IAAIA,CAAUA,EAAEA,CAACA,CAACA;4BAC9BA,CAACA;wBACLA,CAACA;oBACLA,CAACA;oBAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA,QAAQA,CAACA,IAAIA,KAAKA,YAAYA,CAACA,CAACA,CAACA;wBACxCA,EAAEA,CAACA,CAACA,CAACA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA;4BACrBA,EAAEA,CAACA,CAACA,eAAeA,CAACA,QAAQA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA;gCAEnCA,KAAKA,CAACA,IAAIA,CAAUA,QAAQA,CAACA,MAAMA,CAACA,CAACA;4BACzCA,CAACA;wBACLA,CAACA;wBAACA,IAAIA,CAACA,CAACA;4BACJA,EAAEA,CAACA,CAACA,CAACA,eAAeA,CAACA,QAAQA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA;gCAEpCA,QAAQA,CAACA,IAAIA,CAAUA,QAAQA,CAACA,MAAMA,CAACA,CAACA;4BAC5CA,CAACA;wBACLA,CAACA;oBACLA,CAACA;gBACLA,CAACA;gBAEDA,EAAEA,CAACA,CAACA,KAAKA,CAACA,MAAMA,GAAGA,CAACA,IAAIA,OAAOA,CAACA,MAAMA,GAAGA,CAACA,IAAIA,QAAQA,CAACA,MAAMA,GAAG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","file":"mirage-html.js","sourcesContent":["module mirage.html {\r\n    export var version = '0.1.0';\r\n}\r\n","namespace mirage.html {\n    /*\n     The Binder binds a single mirage tree to a single DOM render tree.\n     Each DOM element tagged as mirage with a parent not marked as mirage will start a new binder.\n     This binding is a bidirectional communication channel.\n     - The render tree provides layout inputs and primitive measurements.\n     - The layout tree provides resulting slots (x, y, width, height) to place the absolute render elements.\n     */\n\n    export interface IBinder {\n        getRoot(): core.LayoutNode;\n        setRoot(node: core.LayoutNode);\n        run();\n    }\n\n    export function NewBinder(tree: ITreeTracker): IBinder {\n        let root: core.LayoutNode;\n        let element: Element;\n        let drafter: mirage.draft.IDrafter;\n        let lastDraftSize = new Size(NaN, NaN);\n\n        var updater: mirage.draft.IDraftUpdater = {\n            updateSlots(updates: draft.ISlotUpdate[]) {\n                for (var i = 0; i < updates.length; i++) {\n                    let update = updates[i];\n                    let el = tree.getElementByNode(update.node);\n                    // TODO: updateElement(el, update.node, update.oldRect, update.newRect);\n                }\n            },\n        };\n\n        function getElementSize(el: Element): ISize {\n            return new Size(el.scrollWidth, el.scrollHeight);\n        }\n\n        return {\n            getRoot(): core.LayoutNode {\n                return root;\n            },\n            setRoot(node: core.LayoutNode) {\n                Size.undef(lastDraftSize);\n                root = node;\n                if (!node) {\n                    element = null;\n                    drafter = null;\n                } else {\n                    element = tree.getElementByNode(root);\n                    drafter = draft.NewDrafter(root);\n                }\n            },\n            run() {\n                var rootSize = getElementSize(element);\n                if (!Size.isEqual(lastDraftSize, rootSize)) {\n                    drafter(updater, rootSize);\n                    Size.copyTo(rootSize, lastDraftSize);\n                }\n            },\n        };\n    }\n}","namespace mirage.html {\n    /*\n     The Binder Registry is intended to track all Binders.\n     This is a singleton and will track all binders.\n     Additionally, it will adjust registered binders after a structural tree change.\n     */\n\n    export interface IBinderRegistry {\n        update(addedRoots: core.LayoutNode[], destroyedRoots: core.LayoutNode[]);\n    }\n\n    export function NewBinderRegistry(tree: ITreeTracker, binders?: IBinder[]): IBinderRegistry {\n        let roots: core.LayoutNode[] = [];\n        binders = binders || [];\n\n        // roots tracks the list of roots that are contained within binders\n        function findHoistCandidate(binder: IBinder): core.LayoutNode {\n            let curRoot = binder.getRoot();\n            if (!curRoot)\n                return null;\n            let newRoot = curRoot;\n            // walk up the tree until we find a node without a parent\n            while (newRoot.tree.parent) {\n                newRoot = newRoot.tree.parent;\n            }\n            if (newRoot === curRoot)\n                return null;\n            // if this is already being tracked by a binder, this is not a candidate\n            if (roots.indexOf(newRoot) > -1)\n                return null;\n            return newRoot;\n        }\n\n        function hoist(addedRoots: core.LayoutNode[]): core.LayoutNode[] {\n            // Hoist binders to the root\n            // This is done to ensure that a binder is the true root\n            // as a root may be slipped above an existing binder root\n            // Return added nodes that do not have binders as new root binder candidates\n            let missingBinderNodes: core.LayoutNode[] = addedRoots.slice(0);\n            for (var i = 0; i < binders.length; i++) {\n                let binder = binders[i];\n                let newRoot = findHoistCandidate(binder);\n                if (!newRoot) {\n                    // Since this binder has no candidate, let's destroy it\n                    binders.splice(i, 1);\n                    i--;\n                    continue;\n                }\n                binder.setRoot(newRoot);\n                roots.push(newRoot);\n                // If this binder matches an added root,\n                // it should be excluded from missing binder nodes\n                let missingIndex = missingBinderNodes.indexOf(newRoot);\n                if (missingIndex > -1) {\n                    missingBinderNodes.splice(missingIndex, 1);\n                }\n            }\n            return missingBinderNodes;\n        }\n\n        function create(nodes: core.LayoutNode[]) {\n            for (var i = 0; i < nodes.length; i++) {\n                let node = nodes[i];\n                let binder = NewBinder(tree);\n                binder.setRoot(node);\n                roots.push(node);\n                binders.push(binder);\n            }\n        }\n\n        function adjustDestroyed(destroyedRoots: core.LayoutNode[]) {\n            for (var i = 0; i < binders.length; i++) {\n                let binder = binders[i];\n                let curRoot = binder.getRoot();\n                let index = destroyedRoots.indexOf(curRoot);\n                if (index > -1) {\n                    // Root was destroyed, let's destroy this binder\n                    binders.splice(index, 1);\n                    i--;\n                    // Stop tracking this root as bound\n                    binder.setRoot(null);\n                    let trackIndex = roots.indexOf(curRoot);\n                    if (trackIndex > -1)\n                        roots.splice(trackIndex, 1);\n                }\n            }\n        }\n\n        return {\n            update(addedRoots: core.LayoutNode[], destroyedRoots: core.LayoutNode[]) {\n                let missingBinderNodes = hoist(addedRoots);\n                create(missingBinderNodes);\n                adjustDestroyed(destroyedRoots);\n            },\n        };\n    }\n}","namespace mirage.html {\n    /*\n     The DOM Monitor is intended to watch the entire DOM and filter for mirage-tagged elements.\n     It will report nodes added and removed as a result of DOM tree and attribute changes.\n     For instance, if someone deletes the `data-layout` attribute from a DOM element, it will be reported as removed.\n     */\n\n    export interface IDOMMonitor {\n        start();\n        stop();\n    }\n\n    export interface INodeMonitorUpdate {\n        (added: Element[], removed: Element[], untagged: Element[]): void;\n    }\n\n    export function isMirageElement(node: Node): boolean {\n        // Only consider element nodes\n        // Only consider nodes with 'data-layout'\n        // Attribute monitor will pick up added/removed attribute\n        return node.nodeType === node.ELEMENT_NODE\n            && !!(<Element>node).getAttribute(\"data-layout\");\n    }\n\n    export function NewDOMMonitor(target: Node, onUpdate: INodeMonitorUpdate): IDOMMonitor {\n        var observer = new MutationObserver(mutations => {\n            var added: Element[] = [];\n            var removed: Element[] = [];\n            var untagged: Element[] = [];\n\n            for (var i = 0; i < mutations.length; i++) {\n                let mutation = mutations[i];\n                if (mutation.type === \"childList\") {\n                    for (var j = 0; j < mutation.addedNodes.length; j++) {\n                        let el = mutation.addedNodes[j];\n                        if (isMirageElement(el)) {\n                            added.push(<Element>el);\n                        }\n                    }\n                    for (var j = 0; j < mutation.removedNodes.length; j++) {\n                        let el = mutation.removedNodes[j];\n                        if (isMirageElement(el)) {\n                            removed.push(<Element>el);\n                        }\n                    }\n                } else if (mutation.type === \"attributes\") {\n                    if (!mutation.oldValue) {\n                        if (isMirageElement(mutation.target)) {\n                            // 'data-layout' attribute added\n                            added.push(<Element>mutation.target);\n                        }\n                    } else {\n                        if (!isMirageElement(mutation.target)) {\n                            // 'data-layout' attribute removed\n                            untagged.push(<Element>mutation.target);\n                        }\n                    }\n                }\n            }\n\n            if (added.length > 0 || removed.length > 0 || untagged.length > 0) {\n                onUpdate(added, removed, untagged);\n            }\n        });\n\n        return {\n            start() {\n                observer.observe(target, {\n                    childList: true,\n                    subtree: true,\n                    attributes: true,\n                    attributeOldValue: true,\n                    attributeFilter: [\"data-layout\"],\n                });\n            },\n            stop() {\n                observer.disconnect();\n            },\n        };\n    }\n}","namespace mirage.html {\n    /*\n     When running tree synchronization, child nodes can appear out of order\n     The Panel Inserter will track items in escrow\n     When ready to commit, each item will be inserted into the proper index\n     */\n\n    export interface IPanelInserter {\n        add(panel: Panel, el: Element, node: core.LayoutNode);\n        commit();\n    }\n\n    interface IPanelInsertItem {\n        panel: Panel;\n        entries: IPanelInsertItemEntry[];\n    }\n    interface IPanelInsertItemEntry {\n        node: core.LayoutNode;\n        index: number;\n    }\n\n    export function NewPanelInserter(): IPanelInserter {\n        var items: IPanelInsertItem[] = [];\n\n        return {\n            add(panel: Panel, el: Element, node: core.LayoutNode) {\n                let item = panel.getAttached(\"html-sync-escrow\");\n                if (!item) {\n                    item = {\n                        panel: panel,\n                        entries: [],\n                    };\n                    panel.setAttached(\"html-sync-escrow\", item);\n                    items.push(item);\n                }\n\n                item.entries.push({\n                    node: node,\n                    index: Array.prototype.indexOf.call(el.parentElement.children, el),\n                });\n            },\n            commit() {\n                for (var i = 0; i < items.length; i++) {\n                    let item = items[i];\n                    let panel = item.panel;\n                    let entries = item.entries;\n                    panel.setAttached(\"html-sync-escrow\", undefined);\n                    entries.sort((a, b) => a.index - b.index);\n                    for (var j = 0; j < entries.length; j++) {\n                        panel.insertChild(entries[j].node, entries[j].index);\n                    }\n                }\n            },\n        };\n    }\n}","namespace mirage.html {\n    /*\n     The Tree Synchronizer tracks added/removed DOM elements.\n     It is responsible for synchronizing the render tree with the layout tree.\n     It also detects mirage roots and builds binders.\n     */\n\n    export interface ITreeSynchronizer {\n        start();\n        stop();\n    }\n\n    export function NewTreeSynchronizer(target: Node, tree?: ITreeTracker, registry?: IBinderRegistry): ITreeSynchronizer {\n        tree = tree || NewTreeTracker();\n        registry = registry || NewBinderRegistry(tree);\n\n        function mirrorAdded(added: Element[]) {\n            // Mirror new render elements to layout tree\n            for (var i = 0; i < added.length; i++) {\n                register(added[i]);\n            }\n        }\n\n        function mirrorUntagged(untagged: Element[], addedRoots: core.LayoutNode[], destroyedRoots: core.LayoutNode[]) {\n            // Mirror nodes that have been untagged, but remain in DOM\n            for (var i = 0; i < untagged.length; i++) {\n                deregister(untagged[i], true, addedRoots, destroyedRoots);\n            }\n        }\n\n        function mirrorRemoved(removed: Element[], addedRoots: core.LayoutNode[], destroyedRoots: core.LayoutNode[]) {\n            // Mirror old render elements from layout tree\n            // Adds nodes to addedRoots that were orphaned by destroying a root\n            // Adds nodes to destroyedRoots that were destroyed mirage parents\n            for (var i = 0; i < removed.length; i++) {\n                deregister(removed[i], false, addedRoots, destroyedRoots);\n            }\n        }\n\n        function register(el: Element) {\n            if (tree.elementExists(el) || !isMirageElement(el))\n                return;\n            // The parent may not be mirrored in the layout tree yet\n            // We will set parent after all adds/removes have completed\n            // TODO: get node type\n            let node = mirage.createNodeByType(\"...\");\n            tree.add(el, node);\n\n            // register children\n            for (let cur = el.firstElementChild; !!cur; cur = cur.nextElementSibling) {\n                register(cur);\n            }\n        }\n\n        function deregister(el: Element, isUntagged: boolean, addedRoots: core.LayoutNode[], destroyedRoots: core.LayoutNode[]) {\n            let node = tree.removeElement(el);\n            if (!node)\n                return;\n            if (!isUntagged) {\n                // deregister children\n                for (let cur = el.firstElementChild; !!cur; cur = cur.nextElementSibling) {\n                    deregister(cur, true, null, null);\n                }\n            }\n\n            let parentNode = node.tree.parent;\n            if (!parentNode) {\n                destroyedRoots.push(node);\n                promoteChildren(el, addedRoots);\n            }\n\n            if (parentNode instanceof Panel) {\n                parentNode.removeChild(node);\n            } else {\n                node.setParent(null);\n            }\n        }\n\n        function promoteChildren(el: Element, addedRoots: core.LayoutNode[]) {\n            for (let cur = el.firstElementChild; !!cur; cur = cur.nextElementSibling) {\n                if (isMirageElement(cur)) {\n                    addedRoots.push(tree.getNodeByElement(cur));\n                } else {\n                    promoteChildren(cur, addedRoots);\n                }\n            }\n        }\n\n        function mirrorAncestry(added: Element[], addedRoots: core.LayoutNode[], inserter: IPanelInserter) {\n            // Configure parents after all layout nodes have been created/destroyed\n            // This is done to ensure parent layout nodes exist\n            // Adds nodes to addedRoots that do not have mirage parents\n            for (var i = 0; i < added.length; i++) {\n                let el = added[i];\n                let node = tree.getNodeByElement(el);\n                if (!node)\n                    continue;\n                // coerce 'none' to null\n                let parentNode = (el.parentElement ? tree.getNodeByElement(el.parentElement) : null) || null;\n                if (parentNode instanceof Panel) {\n                    // To ensure proper ordering, we will collect all new children for each parent\n                    // We will insert the children in sorted order\n                    inserter.add(parentNode, el, node);\n                } else {\n                    node.setParent(parentNode);\n                }\n                if (!node.tree.parent) {\n                    addedRoots.push(node);\n                }\n                configAncestors(el, node, inserter);\n            }\n        }\n\n        function configAncestors(parentEl: Element, parentNode: core.LayoutNode, inserter: IPanelInserter) {\n            for (let cur = parentEl.firstElementChild, i = 0; !!cur; cur = cur.nextElementSibling, i++) {\n                let curNode = tree.getNodeByElement(cur);\n                if (curNode && !curNode.tree.parent) {\n                    if (parentNode instanceof Panel) {\n                        inserter.add(parentNode, cur, curNode);\n                    } else {\n                        curNode.setParent(parentNode);\n                    }\n                    configAncestors(cur, curNode, inserter);\n                }\n            }\n        }\n\n        /*\n         Each update, we need to\n         - construct new layout nodes mirroring new render elements\n         - detach layout nodes mirroring old render elements\n         - configure all new layout nodes with parent\n         - hoist binders to the true root\n         - add binders for new root nodes\n         */\n        function update(added: Element[], removed: Element[], untagged: Element[]) {\n            let inserter = NewPanelInserter();\n            let addedRoots: core.LayoutNode[] = [];\n            let destroyedRoots: core.LayoutNode[] = [];\n\n            mirrorAdded(added);\n            mirrorUntagged(untagged, addedRoots, destroyedRoots);\n            mirrorRemoved(removed, addedRoots, destroyedRoots);\n            mirrorAncestry(added, addedRoots, inserter);\n\n            inserter.commit();\n            registry.update(addedRoots, destroyedRoots);\n        }\n\n        var monitor = NewDOMMonitor(target, update);\n        return {\n            start() {\n                monitor.start();\n            },\n            stop() {\n                monitor.stop();\n            },\n        };\n    }\n}","namespace mirage.html {\n    /*\n     The Tree Tracker tracks render elements (DOM) and layout nodes (mirage).\n     This is a singleton and tracks the entire DOM.\n     Instead of doing lookups using a synchronized double-array, we are tracking a uid on each object.\n     The render element and layout node can be retrieved by uid.\n     We use a DOM attribute ('http://schemas.wsick.com/mirage/html':uid)\n     and a layout node attached property ('mirage-uid') to track the uid.\n     This uid is a running int counter that is converted to a string to match attributes.\n     */\n\n    var XMLNS = \"http://schemas.wsick.com/mirage/html\";\n\n    export interface ITreeTracker {\n        add(el: Element, node: core.LayoutNode): string;\n        removeElement(el: Element);\n        elementExists(el: Element): boolean;\n        getNodeByElement(el: Element): core.LayoutNode;\n        getElementByNode(node: core.LayoutNode): Element;\n    }\n\n    interface IElementHash {\n        [uid: string]: Element;\n    }\n    interface ILayoutNodeHash {\n        [uid: string]: core.LayoutNode;\n    }\n\n    export function NewTreeTracker(): ITreeTracker {\n        var elements: IElementHash = {};\n        var nodes: ILayoutNodeHash = {};\n        var lastUid = 0;\n\n        return {\n            add(el: Element, node: core.LayoutNode): string {\n                lastUid++;\n                var uid = lastUid.toString();\n                el.setAttributeNS(XMLNS, \"uid\", uid);\n                node.setAttached(\"mirage-uid\", uid);\n                elements[uid] = el;\n                nodes[uid] = node;\n                return uid;\n            },\n            removeElement(el: Element): core.LayoutNode {\n                var uid = el.getAttributeNS(XMLNS, \"uid\");\n                var node = !uid ? null : nodes[uid];\n                el.removeAttributeNS(XMLNS, \"uid\");\n                if (node) {\n                    node.setAttached(\"mirage-uid\", undefined);\n                    delete elements[uid];\n                    delete nodes[uid];\n                }\n                return node;\n            },\n            elementExists(el: Element): boolean {\n                var uid = el.getAttributeNS(XMLNS, \"uid\");\n                return elements[uid] === el;\n            },\n            getNodeByElement(el: Element): core.LayoutNode {\n                var uid = el.getAttributeNS(XMLNS, \"uid\");\n                return nodes[uid];\n            },\n            getElementByNode(node: core.LayoutNode): Element {\n                var uid = node.getAttached(\"mirage-uid\");\n                return elements[uid];\n            },\n        };\n    }\n\n    export function getNodeUid(node: core.LayoutNode): string {\n        return node.getAttached(\"mirage-uid\");\n    }\n}"],"sourceRoot":"/mirage"}