{"version":3,"sources":["/mirage/_version.ts","/mirage/core/LayoutNode.ts","/mirage/typeLookup.ts","/mirage/Panel.ts","/mirage/Thickness.ts","/mirage/convert/converters.ts","/mirage/map/mappers.ts","/mirage/Canvas.ts","/mirage/Enums.ts","/mirage/IRowDefinition.ts","/mirage/IColumnDefinition.ts","/mirage/GridDefinitions.ts","/mirage/Grid.ts","/mirage/IGridLength.ts","/mirage/IRenderAdapter.ts","/mirage/Point.ts","/mirage/Rect.ts","/mirage/Size.ts","/mirage/core/converters.ts","/mirage/StackPanel.ts","/mirage/core/Arranger.ts","/mirage/core/DefaultLayoutTree.ts","/mirage/core/LayoutFlags.ts","/mirage/core/mappers.ts","/mirage/core/Measurer.ts","/mirage/core/util.ts","/mirage/draft/ArrangeDrafter.ts","/mirage/draft/Drafter.ts","/mirage/draft/MeasureDrafter.ts","/mirage/draft/SlotDrafter.ts","/mirage/grid/GridArrangeOverride.ts","/mirage/grid/GridMeasureOverride.ts","/mirage/logging/ConsoleLogger.ts","/mirage/logging/NoLogger.ts","/mirage/logging/logging.ts","/mirage/grid/design/Arrange.ts","/mirage/grid/design/GridChildShape.ts","/mirage/grid/design/GridPlacement.ts","/mirage/grid/design/helpers.ts","/mirage/grid/design/IGridDesign.ts","/mirage/grid/design/Measure.ts","/mirage/grid/design/MeasureOverridePass.ts","/mirage/grid/design/Segment.ts","/mirage-html/_version.ts","/mirage-html/AnimClock.ts","/mirage-html/Binder.ts","/mirage-html/BinderRegistry.ts","/mirage-html/DOMMonitor.ts","/mirage-html/DraftUpdater.ts","/mirage-html/ElementTranslator.ts","/mirage-html/global.ts","/mirage-html/HtmlNode.ts","/mirage-html/Orchestrator.ts","/mirage-html/PanelInserter.ts","/mirage-html/TreeSynchronizer.ts","/mirage-html/TreeTracker.ts"],"names":["mirage","mirage.core","mirage.core.LayoutNode","mirage.core.LayoutNode.constructor","mirage.core.LayoutNode.init","mirage.core.LayoutNode.createInputs","mirage.core.LayoutNode.createState","mirage.core.LayoutNode.createTree","mirage.core.LayoutNode.createMeasurer","mirage.core.LayoutNode.createArranger","mirage.core.LayoutNode.visible","mirage.core.LayoutNode.useLayoutRounding","mirage.core.LayoutNode.margin","mirage.core.LayoutNode.width","mirage.core.LayoutNode.height","mirage.core.LayoutNode.minWidth","mirage.core.LayoutNode.minHeight","mirage.core.LayoutNode.maxWidth","mirage.core.LayoutNode.maxHeight","mirage.core.LayoutNode.horizontalAlignment","mirage.core.LayoutNode.verticalAlignment","mirage.core.LayoutNode.getAttached","mirage.core.LayoutNode.setAttached","mirage.core.LayoutNode.setParent","mirage.core.LayoutNode.onDetached","mirage.core.LayoutNode.onAttached","mirage.core.LayoutNode.walkDeep","mirage.core.LayoutNode.walkDeep.step","mirage.core.LayoutNode.walkDeep.skipBranch","mirage.core.LayoutNode.invalidateMeasure","mirage.core.LayoutNode.doMeasure","mirage.core.LayoutNode.measure","mirage.core.LayoutNode.measureOverride","mirage.core.LayoutNode.invalidateArrange","mirage.core.LayoutNode.doArrange","mirage.core.LayoutNode.arrange","mirage.core.LayoutNode.arrangeOverride","mirage.core.LayoutNode.slot","mirage.core.onNodeSizeInputsChanged","mirage.createNodeByType","mirage.registerNodeType","mirage.Panel","mirage.Panel.constructor","mirage.Panel.createTree","mirage.Panel.measureOverride","mirage.Panel.arrangeOverride","mirage.Panel.childCount","mirage.Panel.insertChild","mirage.Panel.prependChild","mirage.Panel.appendChild","mirage.Panel.removeChild","mirage.Panel.removeChildAt","mirage.Panel.getChildAt","mirage.Panel.indexOfChild","mirage.NewPanelTree","mirage.NewPanelTree.step","mirage.Thickness","mirage.Thickness.constructor","mirage.Thickness.isEqual","mirage.Thickness.growSize","mirage.Thickness.shrinkSize","mirage.Thickness.shrinkRect","mirage.convert","mirage.convert.register","mirage.convert.getConverter","mirage.map","mirage.map.getSetter","mirage.map.getMapper","mirage.map.registerNormal","mirage.map.registerCustom","mirage.Canvas","mirage.Canvas.constructor","mirage.Canvas.getLeft","mirage.Canvas.setLeft","mirage.Canvas.getTop","mirage.Canvas.setTop","mirage.Canvas.measureOverride","mirage.Canvas.arrangeOverride","mirage.convertCanvasCoord","mirage.HorizontalAlignment","mirage.VerticalAlignment","mirage.Orientation","mirage.NewRowDefinition","mirage.NewRowDefinition.getActualHeight","mirage.NewRowDefinition.setActualHeight","mirage.parseGridRowDef","mirage.parseGridRowDef.getActualHeight","mirage.parseGridRowDef.setActualHeight","mirage.NewColumnDefinition","mirage.NewColumnDefinition.getActualWidth","mirage.NewColumnDefinition.setActualWidth","mirage.parseGridColDef","mirage.parseGridColDef.getActualWidth","mirage.parseGridColDef.setActualWidth","mirage.NewRowDefinitions","mirage.NewColumnDefinitions","mirage.walkDefinitions","mirage.walkDefinitions.walk","mirage.Grid","mirage.Grid.constructor","mirage.Grid.getColumn","mirage.Grid.setColumn","mirage.Grid.getColumnSpan","mirage.Grid.setColumnSpan","mirage.Grid.getRow","mirage.Grid.setRow","mirage.Grid.getRowSpan","mirage.Grid.setRowSpan","mirage.Grid.init","mirage.Grid.rowDefinitions","mirage.Grid.columnDefinitions","mirage.Grid.createInputs","mirage.Grid.createState","mirage.Grid.measureOverride","mirage.Grid.arrangeOverride","mirage.invalidateCell","mirage.convertGridCell","mirage.GridUnitType","mirage.parseGridLength","mirage.adapters","mirage.adapters.register","mirage.adapters.unregister","mirage.adapters.updateSlots","mirage.Point","mirage.Point.constructor","mirage.Point.isEqual","mirage.Point.copyTo","mirage.Point.round","mirage.Rect","mirage.Rect.constructor","mirage.Rect.clear","mirage.Rect.isEqual","mirage.Rect.isEmpty","mirage.Rect.copyTo","mirage.Rect.isUndef","mirage.Rect.undef","mirage.Size","mirage.Size.constructor","mirage.Size.copyTo","mirage.Size.isEqual","mirage.Size.isEmpty","mirage.Size.max","mirage.Size.min","mirage.Size.round","mirage.Size.clear","mirage.Size.isUndef","mirage.Size.undef","mirage.core.booleanDefaultTrue","mirage.core.float","mirage.core.floatDefaultNaN","mirage.core.floatDefaultInfinite","mirage.core.thickness","mirage.core.enumConverter","mirage.core.splitCommaList","mirage.StackPanel","mirage.StackPanel.constructor","mirage.StackPanel.orientation","mirage.StackPanel.createInputs","mirage.StackPanel.measureOverride","mirage.StackPanel.measureVertical","mirage.StackPanel.measureHorizontal","mirage.StackPanel.arrangeOverride","mirage.StackPanel.arrangeVertical","mirage.StackPanel.arrangeHorizontal","mirage.core.NewArranger","mirage.core.NewArranger.calcOffer","mirage.core.NewArranger.calcVisualOffset","mirage.core.DefaultLayoutTree","mirage.core.DefaultLayoutTree.applyTemplate","mirage.core.DefaultLayoutTree.propagateFlagUp","mirage.core.DefaultLayoutTree.walk","mirage.core.DefaultLayoutTree.walk.step","mirage.core.LayoutFlags","mirage.core.NewMeasurer","mirage.core.coerceSize","mirage.draft","mirage.draft.NewArrangeDrafter","mirage.draft.NewArrangeDrafter.flush","mirage.draft.NewArrangeDrafter.prepare","mirage.draft.NewArrangeDrafter.draft","mirage.draft.NewDrafter","mirage.draft.NewDrafter.runDraft","mirage.draft.NewMeasureDrafter","mirage.draft.NewMeasureDrafter.prepare","mirage.draft.NewMeasureDrafter.draft","mirage.draft.NewSlotDrafter","mirage.draft.NewSlotDrafter.flush","mirage.draft.NewSlotDrafter.prepare","mirage.draft.NewSlotDrafter.draft","mirage.draft.NewSlotDrafter.notify","mirage.grid","mirage.grid.NewGridArrangeOverride","mirage.grid.NewGridMeasureOverride","mirage.logging","mirage.logging.NewConsoleLogger","mirage.logging.NewConsoleLogger.indent","mirage.logging.NewConsoleLogger.unindent","mirage.logging.NewConsoleLogger.doMeasure","mirage.logging.NewConsoleLogger.measure","mirage.logging.NewConsoleLogger.finishMeasure","mirage.logging.NewConsoleLogger.doArrange","mirage.logging.NewConsoleLogger.arrange","mirage.logging.NewConsoleLogger.finishArrange","mirage.logging.NewNoLogger","mirage.logging.NewNoLogger.doMeasure","mirage.logging.NewNoLogger.measure","mirage.logging.NewNoLogger.finishMeasure","mirage.logging.NewNoLogger.doArrange","mirage.logging.NewNoLogger.arrange","mirage.logging.NewNoLogger.finishArrange","mirage.grid.design","mirage.grid.design.NewGridArrangeDesign","mirage.grid.design.NewGridArrangeDesign.init","mirage.grid.design.NewGridArrangeDesign.calcChildRect","mirage.grid.design.originalToOffered","mirage.grid.design.NewGridChildShape","mirage.grid.design.NewGridChildShape.getConstraintInitialSize","mirage.grid.design.NewGridChildShape.init","mirage.grid.design.NewGridChildShape.shouldMeasurePass","mirage.grid.design.NewGridChildShape.calcConstraint","mirage.grid.design.NewGridPlacement","mirage.grid.design.NewGridPlacement.init","mirage.grid.design.NewGridPlacement.add","mirage.grid.design.NewGridPlacement.allocate","mirage.grid.design.helpers","mirage.grid.design.helpers.expand","mirage.grid.design.helpers.assignSize","mirage.grid.design.helpers.calcDesiredToOffered","mirage.grid.design.NewGridDesign","mirage.grid.design.NewGridMeasureDesign","mirage.grid.design.NewGridMeasureDesign.init","mirage.grid.design.NewGridMeasureDesign.beginPass","mirage.grid.design.NewGridMeasureDesign.measureChild","mirage.grid.design.NewGridMeasureDesign.endPass","mirage.grid.design.NewGridMeasureDesign.finish","mirage.grid.design.NewGridMeasureDesign.getDesired","mirage.grid.design.ensureMatrix","mirage.grid.design.prepareCols","mirage.grid.design.prepareRows","mirage.grid.design.syncChildShapes","mirage.grid.design.allocateDesiredSizeFunc","mirage.grid.design.allocateDesiredSizeFunc.hasStarInSpan","mirage.grid.design.allocateDesiredSizeFunc.calcDesired","mirage.grid.design.allocateDesiredSizeFunc.allocSegments","mirage.grid.design.doesGridHaveAutoStar","mirage.grid.design.MeasureOverridePass","mirage.grid.design.NewMeasureOverridePass","mirage.grid.design.Segment","mirage.grid.design.Segment.constructor","mirage.grid.design.Segment.clamp","mirage.grid.design.Segment.init","mirage.html","mirage.html.NewAnimClock","mirage.html.NewAnimClock.tick","mirage.html.NewAnimClock.enable","mirage.html.NewAnimClock.disable","mirage.html.NewBinder","mirage.html.NewBinder.getRootSize","mirage.html.NewBinder.getRoot","mirage.html.NewBinder.setRoot","mirage.html.NewBinder.run","mirage.html.NewBinderRegistry","mirage.html.NewBinderRegistry.hoist","mirage.html.NewBinderRegistry.findRoot","mirage.html.NewBinderRegistry.replaceBinderRoot","mirage.html.NewBinderRegistry.create","mirage.html.NewBinderRegistry.destroy","mirage.html.NewBinderRegistry.destroyBinder","mirage.html.NewBinderRegistry.update","mirage.html.isMirageElement","mirage.html.NewDOMMonitor","mirage.html.NewDOMMonitor.start","mirage.html.NewDOMMonitor.stop","mirage.html.NewDraftUpdater","mirage.html.NewDraftUpdater.updateSlot","mirage.html.NewDraftUpdater.updateSlots","mirage.html.NewElementTranslator","mirage.html.NewElementTranslator.parseDataLayout","mirage.html.NewElementTranslator.applyHash","mirage.html.NewElementTranslator.translateNew","mirage.html.NewElementTranslator.translateChange","mirage.html.watch","mirage.html.getRoots","mirage.html.getLayoutNode","mirage.html.dumpLayoutTree","mirage.html.enableLogging","mirage.html.HtmlNode","mirage.html.HtmlNode.constructor","mirage.html.HtmlNode.getElement","mirage.html.HtmlNode.setElement","mirage.html.HtmlNode.measureOverride","mirage.html.HtmlNode.arrangeOverride","mirage.html.HtmlNode.isDummyElement","mirage.html.calcElementDesired","mirage.html.NewOrchestrator","mirage.html.NewOrchestrator.onFrame","mirage.html.NewOrchestrator.start","mirage.html.NewOrchestrator.stop","mirage.html.NewPanelInserter","mirage.html.NewPanelInserter.add","mirage.html.NewPanelInserter.commit","mirage.html.NewTreeSynchronizer","mirage.html.NewTreeSynchronizer.mirrorAdded","mirage.html.NewTreeSynchronizer.mirrorUntagged","mirage.html.NewTreeSynchronizer.mirrorRemoved","mirage.html.NewTreeSynchronizer.register","mirage.html.NewTreeSynchronizer.deregister","mirage.html.NewTreeSynchronizer.promoteChildren","mirage.html.NewTreeSynchronizer.mirrorTranslations","mirage.html.NewTreeSynchronizer.replaceNode","mirage.html.NewTreeSynchronizer.mirrorAncestry","mirage.html.NewTreeSynchronizer.configAncestors","mirage.html.NewTreeSynchronizer.update","mirage.html.NewTreeSynchronizer.init","mirage.html.NewTreeSynchronizer.scan","mirage.html.NewTreeSynchronizer.start","mirage.html.NewTreeSynchronizer.stop","mirage.html.NewTreeTracker","mirage.html.NewTreeTracker.add","mirage.html.NewTreeTracker.replaceNode","mirage.html.NewTreeTracker.removeElement","mirage.html.NewTreeTracker.elementExists","mirage.html.NewTreeTracker.getNodeByElement","mirage.html.NewTreeTracker.getElementByNode","mirage.html.getNodeUid"],"mappings":"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vCA,MAAMA,CAACA,IAAIA,CAACA,OAAOA,KAAKA,SAASA,CAACA;oBACtCA,CAACA;oBACDD,UAAUA;wBACNE,IAAIA,GAAGA,SAASA,CAACA;oBACrBA,CAACA;iBACJF,CAACA;YACNA,CAACA;YAIDxB,sCAAiBA,GAAjBA;gBACI2B,IAAIA,CAACA,KAAKA,CAACA,KAAKA,IAAIA,gBAAWA,CAACA,OAAOA,GAAGA,gBAAWA,CAACA,WAAWA,CAACA;gBAClEA,IAAIA,CAACA,IAAIA,CAACA,eAAeA,CAACA,gBAAWA,CAACA,WAAWA,CAACA,CAACA;YACvDA,CAACA;YAED3B,8BAASA,GAATA,UAAUA,QAAeA;gBACrB4B,aAAMA,CAACA,SAASA,CAACA,IAAIA,CAACA,CAACA;gBACvBA,IAAIA,MAAMA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,CAACA;gBAC9BA,IAAIA,SAASA,GAAGA,IAAIA,WAAIA,EAAEA,CAACA;gBAE3BA,EAAEA,CAACA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA;oBAEVA,WAAIA,CAACA,MAAMA,CAACA,QAAQA,EAAEA,SAASA,CAACA,CAACA;gBACrCA,CAACA;gBAACA,IAAIA,CAACA,CAACA;oBAEJA,WAAIA,CAACA,MAAMA,CAACA,IAAIA,CAACA,KAAKA,CAACA,aAAaA,EAAEA,SAASA,CAACA,CAACA;gBACrDA,CAACA;gBAEDA,EAAEA,CAACA,CAACA,CAACA,WAAIA,CAACA,OAAOA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA;oBAC3BA,aAAMA,CAACA,OAAOA,CAACA,IAAIA,EAAEA,SAASA,CAACA,CAACA;oBAChCA,IAAIA,MAAMA,GAAGA,IAAIA,CAACA,SAASA,CAACA,SAASA,CAACA,CAACA;oBACvCA,aAAMA,CAACA,aAAaA,CAACA,IAAIA,CAACA,CAACA;oBAC3BA,EAAEA,CAACA,CAACA,CAACA,MAAMA,CAACA;wBACRA,MAAMA,CAACA,KAAKA,CAACA;gBACrBA,CAACA;gBAEDA,EAAEA,CAACA,CAACA,MAAMA,CAACA;oBACPA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DAAYA,CAAAA;IAChBA,CAACA,EAHWjF,kBAAWA,KAAXA,kBAAWA,QAGtBA;IAHDA,IAAYA,WAAWA,GAAXA,kBAGXA,CAAAA;AACLA,CAACA,EAjBS,MAAM,KAAN,MAAM,QAiBf;ACjBD,IAAU,MAAM,CAkGf;AAlGD,WAAU,MAAM,EAAC,CAAC;IAgBdA;QACIkF,IAAIA,GAAgBA,CAACA;QACrBA,IAAIA,GAAGA,GAAGA,CAACA,CAACA;QACZA,IAAIA,GAAGA,GAAGA,MAAMA,CAACA,iBAAiBA,CAACA;QAEnCA,MAAMA,CAACA,CAACA,SAASA,CAACA,MAAMA,CAACA,CAACA,CAACA;YACvBA,KAAKA,CAACA;gBACFA,MAAMA,CAACA,eAAeA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,CAACA;YACzCA,KAAKA,CAACA;gBACFA,GAAGA,GAAGA;oBACFA,KAAKA,EAAEA,SAASA,CAACA,CAACA,CAACA;oBACnBA,IAAIA,EAAEA,SAASA,CAACA,CAACA,CAACA;iBACrBA,CAACA;gBACFA,KAAKA,CAACA;YACVA,KAAKA,CAACA;gBACFA,GAAGA,GAAGA,sBAAeA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,CAACA;gBACpCA,GAAGA,GAAGA,SAASA,CAACA,CAACA,CAACA,CAACA;gBACnBA,GAAGA,GAAGA,SAASA,CAACA,CAACA,CAACA,CAACA;gBACnBA,KAAKA,CAACA;YACVA,KAAKA,CAACA;gBACFA,GAAGA,GAAGA;oBACFA,KAAKA,EAAEA,SAASA,CAACA,CAACA,CAACA;oBACnBA,IAAIA,EAAEA,SAASA,CAACA,CAACA,CAACA;iBACrBA,CAACA;gBACFA,GAAGA,GAAGA,SAASA,CAACA,CAACA,CAACA,CAACA;gBACnBA,GAAGA,GAAGA,SAASA,CAACA,CAACA,CAACA,CAACA;gBACnBA,KAAKA,CAACA;YACVA;gBACIA,GAAGA,GAAGA;oBACFA,KAAKA,EAAEA,CAACA;oBACRA,IAAIA,EAAEA,mBAAYA,CAACA,IAAIA;iBAC1BA,CAACA;gBACFA,KAAKA,CAACA;QACdA,CAACA;QAEDA,IAAIA,MAAMA,GAAGA,GAAGA,CAACA;QACjBA,MAAMA,CAACA;YACHA,MAAMA,EAAEA,GAAGA;YACXA,SAASA,EAAEA,GAAGA;YACdA,SAASA,EAAEA,GAAGA;YACdA,eAAeA;gBACXC,MAAMA,CAACA,MAAMA,CAACA;YAClBA,CAACA;YACDD,eAAeA,YAACA,KAAaA;gBACzBE,MAAMA,GAAGA,KAAKA,CAACA;YACnBA,CAACA;SACJF,CAACA;IACNA,CAACA;IA/CelF,uBAAgBA,mBA+C/BA,CAAAA;IAEDA,yBAAyBA,GAAWA;QAChCqF,IAAIA,GAAgBA,CAACA;QACrBA,IAAIA,GAAGA,GAAGA,CAACA,CAACA;QACZA,IAAIA,GAAGA,GAAGA,MAAMA,CAACA,iBAAiBA,CAACA;QAEnCA,EAAEA,CAACA,CAACA,GAAGA,CAACA,CAACA,CAACA,KAAKA,GAAGA,IAAIA,GAAGA,CAACA,GAAGA,CAACA,MAAMA,GAAGA,CAACA,CAACA,KAAKA,GAAGA,CAACA,CAACA,CAACA;YAChDA,IAAIA,MAAMA,GAAGA,GAAGA,CAACA,MAAMA,CAACA,CAACA,EAAEA,GAAGA,CAACA,MAAMA,GAAGA,CAACA,CAACA,CAACA,KAAKA,CAACA,GAAGA,CAACA,CAACA;YACtDA,GAAGA,GAAGA,sBAAeA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA;YACjCA,GAAGA,CAACA,KAAKA,GAAGA,GAAGA,CAACA,KAAKA,IAAIA,CAACA,CAACA;YAC3BA,GAAGA,GAAGA,QAAQA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,CAACA;YAC/BA,GAAGA,GAAGA,QAAQA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC1BA,EAAEA,CAACA,CAACA,KAAKA,CAACA,GAAGA,CAACA,CAACA,CAACA,CAACA;gBAGbA,GAAGA,GAAGA,MAAMA,CAACA,iBAAiBA,CAACA;YACnCA,CAACA;QACLA,CAACA;QAACA,IAAIA,CAACA,CAACA;YACJA,GAAGA,GAAGA,sBAAeA,CAACA,GAAGA,CAACA,CAACA;QAC/BA,CAACA;QAEDA,IAAIA,MAAMA,GAAGA,GAAGA,CAACA;QACjBA,MAAMA,CAACA;YACHA,MAAMA,EAAEA,GAAGA;YACXA,SAASA,EAAEA,GAAGA;YACdA,SAASA,EAAEA,GAAGA;YACdA,eAAeA;gBACXC,MAAMA,CAACA,MAAMA,CAACA;YAClBA,CAACA;YACDD,eAAeA,YAACA,KAAaA;gBACzBE,MAAMA,GAAGA,KAAKA,CAACA;YACnBA,CAACA;SACJF,CAACA;IACNA,CAACA;AACLrF,CAACA,EAlGS,MAAM,KAAN,MAAM,QAkGf;AClGD,IAAU,MAAM,CAkGf;AAlGD,WAAU,MAAM,EAAC,CAAC;IAgBdA;QACIwF,IAAIA,GAAgBA,CAACA;QACrBA,IAAIA,GAAGA,GAAGA,CAACA,CAACA;QACZA,IAAIA,GAAGA,GAAGA,MAAMA,CAACA,iBAAiBA,CAACA;QAEnCA,MAAMA,CAACA,CAACA,SAASA,CAACA,MAAMA,CAACA,CAACA,CAACA;YACvBA,KAAKA,CAACA;gBACFA,MAAMA,CAACA,eAAeA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,CAACA;YACzCA,KAAKA,CAACA;gBACFA,GAAGA,GAAGA;oBACFA,KAAKA,EAAEA,SAASA,CAACA,CAACA,CAACA;oBACnBA,IAAIA,EAAEA,SAASA,CAACA,CAACA,CAACA;iBACrBA,CAACA;gBACFA,KAAKA,CAACA;YACVA,KAAKA,CAACA;gBACFA,GAAGA,GAAGA,sBAAeA,CAACA,SAASA,CAACA,CAACA,CAACA,CAACA,CAACA;gBACpCA,GAAGA,GAAGA,SAASA,CAACA,CAACA,CAACA,CAACA;gBACnBA,GAAGA,GAAGA,SAASA,CAACA,CAACA,CAACA,CAACA;gBACnBA,KAAKA,CAACA;YACVA,KAAKA,CAACA;gBACFA,GAAGA,GAAGA;oBACFA,KAAKA,EAAEA,SAASA,CAACA,CAACA,CAACA;oBACnBA,IAAIA,EAAEA,SAASA,CAACA,CAACA,CAACA;iBACrBA,CAACA;gBACFA,GAAGA,GAAGA,SAASA,CAACA,CAACA,CAA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AEA,OAAOA,EAAEA,OAAOA,CAACA,CAACA;YAC7DA,CAACA;YAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA,MAAMA,CAACA,MAAMA,KAAKA,CAACA,CAACA,CAACA,CAACA;gBAC7BA,IAAIA,CAACA,GAAGA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA;gBAC9BA,IAAIA,CAACA,GAAGA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CAACA;gBAC9BA,MAAMA,CAACA,IAAIA,gBAASA,CAACA,CAACA,EAAEA,CAACA,EAAEA,CAACA,EAAEA,CAACA,CAACA,CAACA;YACrCA,CAACA;YAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA,MAAMA,CAACA,MAAMA,KAAKA,CAACA,CAACA,CAACA,CAACA;gBAC7BA,MAAMA,CAACA,IAAIA,gBAASA,CAChBA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,EACrBA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,EACrBA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,EACrBA,UAAUA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA,CACxBA,CAACA;YACNA,CAACA;YAACA,IAAIA,CAACA,CAACA;gBACJA,OAAOA,CAACA,IAAIA,CAACA,kCAAkCA,EAAEA,KAAKA,CAACA,CAACA;YAC5DA,CAACA;QACLA,CAACA;QAEDtJ,uBAA8BA,GAAQA;YAClCuJ,MAAMA,CAACA,UAACA,KAAaA;gBACjBA,EAAEA,CAACA,CAACA,CAACA,KAAKA,CAACA;oBACPA,MAAMA,CAACA,CAACA,CAACA;gBACbA,MAAMA,CAACA,GAAGA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA;YAC3BA,CAACA,CAACA;QACNA,CAACA;QANevJ,kBAAaA,gBAM5BA,CAAAA;QAEDA,wBAAwBA,GAAWA;YAC/BwJ,IAAIA,MAAMA,GAAaA,EAAEA,CAACA;YAC1BA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAE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AAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,OAAOA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;gCACtCA,OAAOA,CAACA,CAACA,CAACA,CAACA,cAAcA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,OAAOA,CAACA,CAACA;4BAChDA,CAACA;wBACLA,CAACA;wBACDA,EAAEA,CAACA,CAACA,CAACA,CAACA,OAAOA,CAACA,CAACA,CAACA;4BACZA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,OAAOA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;gCACtCA,OAAOA,CAACA,CAACA,CAACA,CAACA,eAAeA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,OAAOA,CAACA,CAACA;4BACjDA,CAACA;wBACLA,CAACA;oBACLA,CAACA;oBACDD,aAAaA,YAACA,SAAgBA,EAAEA,KAAsBA;wBAClDE,WAAIA,CAACA,KAAKA,CAACA,SAASA,CAACA,CAACA;wBAEtBA,IAAIA,GAAGA,GAAGA,WAAIA,CAACA,SAASA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA;wBACrCA,GAAGA,GAAGA,IAAIA,CAACA,GAAGA,CAACA,GAAGA,EAAEA,EAAEA,CAACA,MAAMA,GAAGA,CAACA,CAACA,CAACA;wBAEnCA,IAAIA,OAAOA,GAAGA,WAAIA,CAACA,aAAaA,CAACA,KAAKA,CAACA,CAACA;wBACxCA,EAAEA,CAACA,CAACA,OAAOA,KAAKA,CAACA,CAACA;4BACdA,OAAOA,GAAGA,OAAOA,IAAIA,CAACA,CAACA;wBAC3BA,OAAOA,GAAGA,IAAIA,CAACA,GAAGA,CAACA,OAAOA,EAAEA,EAAEA,CAACA,MAAMA,GAAGA,GAAGA,CAACA,CAACA;wBAE7CA,IAAIA,GAAGA,GAAGA,WAAIA,CAACA,MAAMA,CAACA,KAAKA,CAACA,IAAIA,CAACA,CAACA;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CA,CAACA,CAACA;oBAC5BA,EAAEA,CAACA,CAACA,aAAQA,CAACA,cAAcA,CAACA,QAAQA,CAACA,MAAMA,CAACA,CAACA;wBACzCA,QAAQA,CAACA;oBACbA,EAAEA,CAACA,CAACA,QAAQA,CAACA,IAAIA,KAAKA,WAAWA,CAACA,CAACA,CAACA;wBAChCA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,QAAQA,CAACA,UAAUA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;4BAClDA,IAAIA,EAAEA,GAAGA,QAAQA,CAACA,UAAUA,CAACA,CAACA,CAACA,CAACA;4BAChCA,EAAEA,CAACA,CAACA,eAAeA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA;gCACtBA,KAAKA,CAACA,IAAIA,CAAUA,EAAEA,CAACA,CAACA;gCACxBA,WAAWA,GAAGA,IAAIA,CAACA;4BACvBA,CAACA;wBACLA,CAACA;wBACDA,GAAGA,CAACA,CAACA,GAAGA,CAACA,CAACA,GAAGA,CAACA,EAAEA,CAACA,GAAGA,QAAQA,CAACA,YAAYA,CAACA,MAAMA,EAAEA,CAACA,EAAEA,EAAEA,CAACA;4BACpDA,IAAIA,EAAEA,GAAGA,QAAQA,CAACA,YAAYA,CAACA,CAACA,CAACA,CAACA;4BAClCA,EAAEA,CAACA,CAACA,eAAeA,CAACA,EAAEA,CAACA,CAACA,CAACA,CAACA;gCACtBA,OAAOA,CAACA,IAAIA,CAAUA,EAAEA,CAACA,CAACA;gCAC1BA,WAAWA,GAAGA,IAAIA,CAACA;4BACvBA,CAACA;wBACLA,CAACA;oBACLA,CAACA;oBAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA,QAAQA,CAACA,IAAIA,KAAKA,YAAYA,CAACA,CAACA,CAACA;wBACxCA,EAAEA,CAACA,CAACA,CAACA,QAAQA,CAACA,QAAQA,CAACA,CAACA,CAACA;4BACrBA,EAAEA,CAACA,CAACA,eAAeA,CAACA,QAAQA,CAACA,MAAMA,CAACA,CAACA,CAACA,CAACA;gCAEnCA,K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","file":"mirage-html.js","sourcesContent":["module mirage {\r\n    export var version = '0.1.1';\r\n}","namespace mirage.core {\n    export interface ILayoutNodeInputs {\n        visible: boolean;\n        useLayoutRounding: boolean;\n        margin: Thickness;\n        width: number;\n        height: number;\n        minWidth: number;\n        minHeight: number;\n        maxWidth: number;\n        maxHeight: number;\n        horizontalAlignment: HorizontalAlignment;\n        verticalAlignment: VerticalAlignment;\n        attached: ILayoutNodeAttachedInputs;\n    }\n\n    export interface ILayoutNodeAttachedInputs {\n        [property: string]: any;\n    }\n\n    export interface ILayoutNodeState {\n        flags: LayoutFlags;\n        lastAvailable: ISize;\n        desiredSize: ISize;\n        hiddenDesire: ISize;\n        layoutSlot: IRect;\n        arrangedSlot: IRect;\n        lastArrangedSlot: IRect;\n    }\n\n    export interface ILayoutTreeDeepWalker {\n        current: LayoutNode;\n        step(): boolean;\n        skipBranch();\n    }\n\n    export var DEFAULT_VISIBLE = true;\n    export var DEFAULT_USE_LAYOUT_ROUNDING = true;\n    export var DEFAULT_WIDTH = NaN;\n    export var DEFAULT_HEIGHT = NaN;\n    export var DEFAULT_MIN_WIDTH = 0.0;\n    export var DEFAULT_MIN_HEIGHT = 0.0;\n    export var DEFAULT_MAX_WIDTH = Number.POSITIVE_INFINITY;\n    export var DEFAULT_MAX_HEIGHT = Number.POSITIVE_INFINITY;\n\n    export class LayoutNode {\n        inputs: ILayoutNodeInputs;\n        state: ILayoutNodeState;\n        tree: ILayoutTree;\n\n        private $measurer: core.IMeasurer;\n        private $arranger: core.IArranger;\n\n        constructor() {\n            this.init();\n        }\n\n        init() {\n            Object.defineProperties(this, {\n                \"inputs\": {value: this.createInputs(), writable: false},\n                \"state\": {value: this.createState(), writable: false},\n                \"tree\": {value: this.createTree(), writable: false},\n                \"attached\": {value: {}, writable: false},\n            });\n            this.$measurer = this.createMeasurer();\n            this.$arranger = this.createArranger();\n        }\n\n        protected createInputs(): ILayoutNodeInputs {\n            return {\n                visible: true,\n                useLayoutRounding: true,\n                margin: new Thickness(),\n                width: NaN,\n                height: NaN,\n                minWidth: 0.0,\n                minHeight: 0.0,\n                maxWidth: Number.POSITIVE_INFINITY,\n                maxHeight: Number.POSITIVE_INFINITY,\n                horizontalAlignment: HorizontalAlignment.stretch,\n                verticalAlignment: VerticalAlignment.stretch,\n                attached: {},\n            };\n        }\n\n        protected createState(): ILayoutNodeState {\n            return {\n                flags: LayoutFlags.none,\n                lastAvailable: new Size(NaN, NaN),\n                desiredSize: new Size(),\n                hiddenDesire: new Size(),\n                layoutSlot: new Rect(NaN, NaN, NaN, NaN),\n                arrangedSlot: new Rect(),\n                lastArrangedSlot: new Rect(NaN, NaN, NaN, NaN),\n            };\n        }\n\n        protected createTree(): ILayoutTree {\n            return DefaultLayoutTree();\n        }\n\n        protected createMeasurer(): core.IMeasurer {\n            return core.NewMeasurer(this.inputs, this.state, this.tree, constraint => this.measureOverride(constraint));\n        }\n\n        protected createArranger(): core.IArranger {\n            return core.NewArranger(this.inputs, this.state, this.tree, arrangeSize => this.arrangeOverride(arrangeSize));\n        }\n\n        // PROPERTIES\n\n        get visible(): boolean {\n            return this.inputs.visible;\n        }\n\n        set visible(value: boolean) {\n            if (this.inputs.visible === value)\n                return;\n            this.inputs.visible = value === true;\n            this.invalidateMeasure();\n            var parent = this.tree.parent;\n            if (parent)\n                parent.invalidateMeasure();\n        }\n\n        get useLayoutRounding(): boolean {\n            return this.inputs.useLayoutRounding;\n        }\n\n        set useLayoutRounding(value: boolean) {\n            if (this.inputs.useLayoutRounding === value)\n                return;\n            this.inputs.useLayoutRounding = value === true;\n            this.invalidateMeasure();\n            this.invalidateArrange();\n        }\n\n        get margin(): Thickness {\n            return this.inputs.margin;\n        }\n\n        set margin(value: Thickness) {\n            if (!value) // unset\n                value = new Thickness();\n            if (Thickness.isEqual(this.inputs.margin, value))\n                return;\n            this.inputs.margin = value;\n            onNodeSizeInputsChanged(this);\n        }\n\n        get width(): number {\n            return this.inputs.width;\n        }\n\n        set width(value: number) {\n            if (value == null) //unset\n                value = DEFAULT_WIDTH;\n            if (this.inputs.width === value)\n                return;\n            this.inputs.width = value;\n            onNodeSizeInputsChanged(this);\n        }\n\n        get height(): number {\n            return this.inputs.height;\n        }\n\n        set height(value: number) {\n            if (value == null) //unset\n                value = DEFAULT_HEIGHT;\n            if (this.inputs.height === value)\n                return;\n            this.inputs.height = value;\n            onNodeSizeInputsChanged(this);\n        }\n\n        get minWidth(): number {\n            return this.inputs.minWidth;\n        }\n\n        set minWidth(value: number) {\n            if (value == null) //unset\n                value = DEFAULT_MIN_WIDTH;\n            if (this.inputs.minWidth === value)\n                return;\n            this.inputs.minWidth = value;\n            onNodeSizeInputsChanged(this);\n        }\n\n        get minHeight(): number {\n            return this.inputs.minHeight;\n        }\n\n        set minHeight(value: number) {\n            if (value == null) //unset\n                value = DEFAULT_MIN_HEIGHT;\n            if (this.inputs.minHeight === value)\n                return;\n            this.inputs.minHeight = value;\n            onNodeSizeInputsChanged(this);\n        }\n\n        get maxWidth(): number {\n            return this.inputs.maxWidth;\n        }\n\n        set maxWidth(value: number) {\n            if (value == null) //unset\n                value = DEFAULT_MAX_WIDTH;\n            if (this.inputs.maxWidth === value)\n                return;\n            this.inputs.maxWidth = value;\n            onNodeSizeInputsChanged(this);\n        }\n\n        get maxHeight(): number {\n            return this.inputs.maxHeight;\n        }\n\n        set maxHeight(value: number) {\n            if (value == null) //unset\n                value = DEFAULT_MAX_HEIGHT;\n            if (this.inputs.maxHeight === value)\n                return;\n            this.inputs.maxHeight = value;\n            onNodeSizeInputsChanged(this);\n        }\n\n        get horizontalAlignment(): HorizontalAlignment {\n            return this.inputs.horizontalAlignment;\n        }\n\n        set horizontalAlignment(value: HorizontalAlignment) {\n            value = value || 0; // coerce null, undefined, 0 => 0\n            if (this.inputs.horizontalAlignment === value)\n                return;\n            this.inputs.horizontalAlignment = value;\n            this.invalidateArrange();\n        }\n\n        get verticalAlignment(): VerticalAlignment {\n            return this.inputs.verticalAlignment;\n        }\n\n        set verticalAlignment(value: VerticalAlignment) {\n            value = value || 0; // coerce null, undefined, 0 => 0\n            if (this.inputs.verticalAlignment === value)\n                return;\n            this.inputs.verticalAlignment = value;\n            this.invalidateArrange();\n        }\n\n        // ATTACHED\n\n        getAttached(property: string): any {\n            return this.inputs.attached[property];\n        }\n\n        setAttached(property: string, value: any) {\n            if (value === undefined) {\n                delete this.inputs.attached[property];\n            } else {\n                this.inputs.attached[property] = value;\n            }\n        }\n\n        // TREE\n\n        setParent(parent: LayoutNode) {\n            if (!parent) {\n                if (!this.tree.parent)\n                    return;\n                this.tree.parent = null;\n                this.onDetached();\n            } else {\n                if (parent === this.tree.parent)\n                    return;\n                this.tree.parent = null;\n                this.onDetached();\n                this.tree.parent = parent;\n                this.onAttached();\n            }\n        }\n\n        protected onDetached() {\n            this.invalidateMeasure();\n            if (this.tree.parent)\n                this.tree.parent.invalidateMeasure();\n            Rect.undef(this.state.layoutSlot);\n        }\n\n        protected onAttached() {\n            var state = this.state;\n            Size.undef(state.lastAvailable);\n            Rect.undef(state.layoutSlot);\n            Size.clear(state.arrangedSlot);\n            this.invalidateMeasure();\n            this.invalidateArrange();\n            if ((state.flags & LayoutFlags.slotHint) > 0 || !Rect.isUndef(state.lastArrangedSlot)) {\n                this.tree.propagateFlagUp(LayoutFlags.slotHint);\n            }\n        }\n\n        walkDeep(reverse?: boolean): ILayoutTreeDeepWalker {\n            var last: LayoutNode = undefined;\n            var walkList: LayoutNode[] = [this];\n\n            return {\n                current: undefined,\n                step(): boolean {\n                    if (last) {\n                        for (var subwalker = last.tree.walk(reverse); subwalker.step();) {\n                            walkList.unshift(subwalker.current);\n                        }\n                    }\n\n                    this.current = last = walkList.shift();\n                    return this.current !== undefined;\n                },\n                skipBranch() {\n                    last = undefined;\n                },\n            };\n        }\n\n        // LAYOUT\n\n        invalidateMeasure() {\n            this.state.flags |= LayoutFlags.measure | LayoutFlags.measureHint;\n            this.tree.propagateFlagUp(LayoutFlags.measureHint);\n        }\n\n        doMeasure(rootSize: ISize): boolean {\n            logger.doMeasure(this);\n            var parent = this.tree.parent;\n            var available = new Size();\n\n            if (!parent) {\n                // A root element will always use root size for measure\n                Size.copyTo(rootSize, available);\n            } else {\n                // Other elements will use their last available size\n                Size.copyTo(this.state.lastAvailable, available);\n            }\n\n            if (!Size.isUndef(available)) {\n                logger.measure(this, available);\n                let change = this.$measurer(available);\n                logger.finishMeasure(this);\n                if (!change)\n                    return false;\n            }\n\n            if (parent)\n                parent.invalidateMeasure();\n\n            this.state.flags &= ~LayoutFlags.measure;\n            return true;\n        }\n\n        measure(availableSize: ISize): boolean {\n            logger.measure(this, availableSize);\n            let change = this.$measurer(availableSize);\n            logger.finishMeasure(this);\n            return change;\n        }\n\n        protected measureOverride(constraint: ISize): ISize {\n            var desired = new Size();\n            for (var walker = this.tree.walk(); walker.step();) {\n                walker.current.measure(constraint);\n                Size.max(desired, walker.current.state.desiredSize);\n            }\n            return desired;\n        }\n\n        invalidateArrange() {\n            this.state.flags |= LayoutFlags.arrange | LayoutFlags.arrangeHint;\n            this.tree.propagateFlagUp(LayoutFlags.arrangeHint);\n        }\n\n        doArrange(rootSize: ISize): boolean {\n            logger.doArrange(this);\n            var parent = this.tree.parent;\n            var final = new Rect();\n            if (!parent) {\n                // A root element will always use root size for arrange\n                Size.copyTo(rootSize, final);\n                // Constrain \"infinite\" dimensions by desired measure\n                if (!isFinite(final.width))\n                    final.width = this.state.desiredSize.width;\n                if (!isFinite(final.height))\n                    final.height = this.state.desiredSize.height;\n            } else {\n                // If we are starting an arrange from a non-root element,\n                //   our measure developed a desired size that *did not*\n                //   cause a further invalidation up the tree\n                // This means that our desired size *is* our final for arrange\n                Size.copyTo(this.state.desiredSize, final);\n            }\n\n            if (!Rect.isUndef(final)) {\n                logger.arrange(this, final);\n                let change = this.$arranger(final);\n                logger.finishArrange(this);\n                if (!change)\n                    return false;\n            }\n\n            if (parent)\n                parent.invalidateArrange();\n\n            return true;\n        }\n\n        arrange(finalRect: IRect): boolean {\n            logger.arrange(this, finalRect);\n            let change = this.$arranger(finalRect);\n            logger.finishArrange(this);\n            return change;\n        }\n\n        protected arrangeOverride(arrangeSize: ISize): ISize {\n            var arranged = new Size(arrangeSize.width, arrangeSize.height);\n            for (var walker = this.tree.walk(); walker.step();) {\n                var childRect = new Rect(0, 0, arrangeSize.width, arrangeSize.height);\n                walker.current.arrange(childRect);\n            }\n            return arranged;\n        }\n\n        slot(oldRect: IRect, newRect: IRect): boolean {\n            var state = this.state;\n            if (!Rect.isUndef(state.lastArrangedSlot))\n                Rect.copyTo(state.lastArrangedSlot, oldRect);\n            Rect.copyTo(state.arrangedSlot, newRect);\n            Rect.undef(state.lastArrangedSlot);\n            // TODO: Set actualWidth, actualHeight\n            return true;\n        }\n    }\n\n    function onNodeSizeInputsChanged(node: core.LayoutNode) {\n        node.invalidateMeasure();\n        node.invalidateArrange();\n        var parent = node.tree.parent;\n        if (parent)\n            parent.invalidateMeasure();\n    }\n}","namespace mirage {\n    interface ITypeCreatorHash {\n        [type: string]: ITypeNodeCreator;\n    }\n    var typeCreators: ITypeCreatorHash = {};\n\n    export function createNodeByType(type: string): core.LayoutNode {\n        var creator = typeCreators[type];\n        if (!creator)\n            return new core.LayoutNode();\n        return new creator();\n    }\n\n    export interface ITypeNodeCreator {\n        new (): core.LayoutNode;\n    }\n    export function registerNodeType(type: string, creator: ITypeNodeCreator) {\n        if (typeCreators[type]) {\n            console.warn(\"[mirage] Overriding type registration for \" + type);\n        }\n        typeCreators[type] = creator;\n    }\n}","/// <reference path=\"core/LayoutNode\" />\n/// <reference path=\"typeLookup\" />\n\nnamespace mirage {\n    export class Panel extends core.LayoutNode {\n        tree: IPanelTree;\n\n        protected createTree(): core.ILayoutTree {\n            return NewPanelTree();\n        }\n\n        protected measureOverride(constraint: ISize): ISize {\n            let measured = new Size();\n            for (let walker = this.tree.walk(); walker.step();) {\n                let child = walker.current;\n                child.measure(constraint);\n                Size.max(measured, child.state.desiredSize);\n            }\n            return measured;\n        }\n\n        protected arrangeOverride(arrangeSize: ISize): ISize {\n            let finalRect = new Rect(0, 0, arrangeSize.width, arrangeSize.height);\n            for (let walker = this.tree.walk(); walker.step();) {\n                walker.current.arrange(finalRect);\n            }\n            return new Size(arrangeSize.width, arrangeSize.height);\n        }\n\n        get childCount(): number {\n            return this.tree.children.length;\n        }\n\n        insertChild(child: core.LayoutNode, index: number) {\n            var children = this.tree.children;\n            if (index >= children.length) {\n                this.appendChild(child);\n            } else if (index <= 0) {\n                this.prependChild(child);\n            } else {\n                children.splice(index, 0, child);\n                child.setParent(this);\n            }\n        }\n\n        prependChild(child: core.LayoutNode) {\n            this.tree.children.unshift(child);\n            child.setParent(this);\n        }\n\n        appendChild(child: core.LayoutNode) {\n            this.tree.children.push(child);\n            child.setParent(this);\n        }\n\n        removeChild(child: core.LayoutNode): boolean {\n            var children = this.tree.children;\n            var index = children.indexOf(child);\n            if (index < 0)\n                return false;\n            this.tree.children.splice(index, 1);\n            child.setParent(null);\n            return true;\n        }\n\n        removeChildAt(index: number): core.LayoutNode {\n            var children = this.tree.children;\n            if (index < 0 || index >= children.length)\n                return null;\n            var removed = children.splice(index, 1)[0];\n            if (removed)\n                removed.setParent(null);\n            return removed;\n        }\n\n        getChildAt(index: number): core.LayoutNode {\n            return this.tree.children[index];\n        }\n\n        indexOfChild(child: core.LayoutNode): number {\n            return this.tree.children.indexOf(child);\n        }\n    }\n    registerNodeType(\"panel\", Panel);\n\n    export interface IPanelTree extends core.ILayoutTree {\n        children: core.LayoutNode[];\n    }\n\n    export function NewPanelTree(): IPanelTree {\n        var tree = <IPanelTree>core.DefaultLayoutTree();\n        tree.children = [];\n        tree.walk = (reverse?: boolean): core.ILayoutTreeWalker => {\n            if (!reverse) {\n                var i = -1;\n                return {\n                    current: undefined,\n                    step(): boolean {\n                        i++;\n                        if (i >= tree.children.length) {\n                            this.current = undefined;\n                            return false;\n                        }\n                        this.current = tree.children[i];\n                        return true;\n                    },\n                };\n            } else {\n                var i = tree.children.length;\n                return {\n                    current: undefined,\n                    step(): boolean {\n                        i--;\n                        if (i < 0) {\n                            this.current = undefined;\n                            return false;\n                        }\n                        this.current = tree.children[i];\n                        return true;\n                    },\n                }\n            }\n        };\n        return tree;\n    }\n}","namespace mirage {\r\n    export class Thickness {\r\n        left: number;\r\n        top: number;\r\n        right: number;\r\n        bottom: number;\r\n\r\n        constructor(left?: number, top?: number, right?: number, bottom?: number) {\r\n            this.left = left == null ? 0 : left;\r\n            this.top = top == null ? 0 : top;\r\n            this.right = right == null ? 0 : right;\r\n            this.bottom = bottom == null ? 0 : bottom;\r\n        }\r\n\r\n        static isEqual(t1: Thickness, t2: Thickness): boolean {\r\n            return t1.left === t2.left\r\n                && t1.top === t2.top\r\n                && t1.right === t2.right\r\n                && t1.bottom === t2.bottom;\r\n        }\r\n\r\n        static growSize(thickness: Thickness, dest: Size) {\r\n            var w = dest.width;\r\n            var h = dest.height;\r\n            if (w != Number.POSITIVE_INFINITY)\r\n                w += thickness.left + thickness.right;\r\n            if (h != Number.POSITIVE_INFINITY)\r\n                h += thickness.top + thickness.bottom;\r\n            dest.width = w > 0 ? w : 0;\r\n            dest.height = h > 0 ? h : 0;\r\n            return dest;\r\n        }\r\n\r\n        static shrinkSize(thickness: Thickness, dest: Size) {\r\n            var w = dest.width;\r\n            var h = dest.height;\r\n            if (w != Number.POSITIVE_INFINITY)\r\n                w -= thickness.left + thickness.right;\r\n            if (h != Number.POSITIVE_INFINITY)\r\n                h -= thickness.top + thickness.bottom;\r\n            dest.width = w > 0 ? w : 0;\r\n            dest.height = h > 0 ? h : 0;\r\n            return dest;\r\n        }\r\n\r\n        static shrinkRect(thickness: Thickness, dest: IRect) {\r\n            dest.x += thickness.left;\r\n            dest.y += thickness.top;\r\n            dest.width -= thickness.left + thickness.right;\r\n            dest.height -= thickness.top + thickness.bottom;\r\n            if (dest.width < 0)\r\n                dest.width = 0;\r\n            if (dest.height < 0)\r\n                dest.height = 0;\r\n        }\r\n    }\r\n}","/// <reference path=\"../Thickness\" />\n\nnamespace mirage.convert {\n    /*\n     Converters map values from a string to the data type registered to a property name\n     */\n\n    export interface IConverter {\n        (value: string): any;\n    }\n    let converters: {[property: string]: IConverter;} = {};\n\n    export function register(property: string, converter: IConverter) {\n        converters[property] = converter;\n    }\n\n    export function getConverter(property: string): IConverter {\n        return converters[property];\n    }\n}","/// <reference path=\"../convert/converters\" />\n\nnamespace mirage.map {\n    /*\n     Setters provide a consistent interface to set properties (normal and attached) on a LayoutNode\n     Mappers will map a string onto a node using a property's registered converter and setter\n     */\n    export interface IPropertySetter {\n        (node: core.LayoutNode, value: any): void;\n    }\n    export interface IPropertyMapper {\n        (node: core.LayoutNode, value: string): void;\n    }\n    let setters: {[property: string]: IPropertySetter;} = {};\n    let mappers: {[property: string]: IPropertyMapper;} = {};\n\n\n    export function getSetter(property: string): IPropertySetter {\n        let setter = setters[property];\n        if (!setter && property.indexOf(\".\") > -1) {\n            setter = (node, value) => node.setAttached(property, value);\n        }\n        return setter;\n    }\n\n    export function getMapper(property: string): IPropertyMapper {\n        let mapper = mappers[property];\n        if (!mapper && property.indexOf(\".\") > -1) {\n            mapper = (node, value) => node.setAttached(property, value);\n        }\n        return mapper;\n    }\n\n    export function registerNormal(property: string, key: string): void {\n        setters[property] = (node, value) => node[key] = value;\n        let converter = convert.getConverter(property);\n        mappers[property] = (node, value) => node[key] = converter(value);\n    }\n\n    export function registerCustom(property: string, setter: IPropertySetter): void {\n        setters[property] = setter;\n        let converter = convert.getConverter(property);\n        mappers[property] = (node, value) => setter(node, converter(value));\n    }\n}","/// <reference path=\"Panel\" />\n/// <reference path=\"typeLookup\" />\n/// <reference path=\"convert/converters\" />\n/// <reference path=\"map/mappers\" />\n\nnamespace mirage {\n    export class Canvas extends Panel {\n        static getLeft(node: core.LayoutNode): number {\n            return node.getAttached(\"canvas.left\");\n        }\n\n        static setLeft(node: core.LayoutNode, value: number) {\n            node.setAttached(\"canvas.left\", value);\n            node.invalidateArrange();\n        }\n\n        static getTop(node: core.LayoutNode): number {\n            return node.getAttached(\"canvas.top\");\n        }\n\n        static setTop(node: core.LayoutNode, value: number) {\n            node.setAttached(\"canvas.top\", value);\n            node.invalidateArrange();\n        }\n\n        protected measureOverride(constraint: ISize): ISize {\n            var available = new Size(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n            for (var walker = this.tree.walk(); walker.step();) {\n                walker.current.measure(available);\n            }\n            return new Size();\n        }\n\n        protected arrangeOverride(arrangeSize: ISize): ISize {\n            var cr = new Rect();\n            for (var walker = this.tree.walk(); walker.step();) {\n                let child = walker.current;\n                //NOTE: Coercing undefined, null, NaN, and 0 to 0\n                cr.x = Canvas.getLeft(child) || 0;\n                cr.y = Canvas.getTop(child) || 0;\n                Size.copyTo(child.state.desiredSize, cr);\n                child.arrange(cr);\n            }\n            return arrangeSize;\n        }\n    }\n    registerNodeType(\"canvas\", Canvas);\n    convert.register(\"canvas.left\", convertCanvasCoord);\n    convert.register(\"canvas.top\", convertCanvasCoord);\n    map.registerCustom(\"canvas.left\", Canvas.setLeft);\n    map.registerCustom(\"canvas.top\", Canvas.setTop);\n    function convertCanvasCoord(value: string): number {\n        if (!value)\n            return 0;\n        return parseFloat(value);\n    }\n}","namespace mirage {\n    export enum HorizontalAlignment {\n        stretch = 0,\n        left = 1,\n        center = 2,\n        right = 3,\n    }\n    export enum VerticalAlignment {\n        stretch = 0,\n        top = 1,\n        center = 2,\n        bottom = 3,\n    }\n    export enum Orientation {\n        horizontal = 0,\n        vertical = 1,\n    }\n}","namespace mirage {\n    export interface IRowDefinition {\n        height: IGridLength;\n        minHeight: number;\n        maxHeight: number;\n        getActualHeight(): number;\n\n        /// WARNING: This should only be used by engine\n        setActualHeight(value: number);\n    }\n\n    export function NewRowDefinition(): IRowDefinition;\n    export function NewRowDefinition(height: string): IRowDefinition;\n    export function NewRowDefinition(heightValue: number, heightType: GridUnitType): IRowDefinition;\n    export function NewRowDefinition(height: string, minHeight: number, maxHeight: number): IRowDefinition;\n    export function NewRowDefinition(heightValue: number, heightType: GridUnitType, minHeight: number, maxHeight: number): IRowDefinition;\n    export function NewRowDefinition(): IRowDefinition {\n        var len: IGridLength;\n        var min = 0;\n        var max = Number.POSITIVE_INFINITY;\n\n        switch (arguments.length) {\n            case 1:\n                return parseGridRowDef(arguments[0]);\n            case 2:\n                len = {\n                    value: arguments[0],\n                    type: arguments[1],\n                };\n                break;\n            case 3:\n                len = parseGridLength(arguments[0]);\n                min = arguments[1];\n                max = arguments[2];\n                break;\n            case 4:\n                len = {\n                    value: arguments[0],\n                    type: arguments[1],\n                };\n                min = arguments[2];\n                max = arguments[3];\n                break;\n            default:\n                len = {\n                    value: 1,\n                    type: GridUnitType.star,\n                };\n                break;\n        }\n\n        var actual = NaN;\n        return {\n            height: len,\n            minHeight: min,\n            maxHeight: max,\n            getActualHeight(): number {\n                return actual;\n            },\n            setActualHeight(value: number) {\n                actual = value;\n            },\n        };\n    }\n\n    function parseGridRowDef(raw: string): IRowDefinition {\n        let len: IGridLength;\n        let min = 0;\n        let max = Number.POSITIVE_INFINITY;\n\n        if (raw[0] === \"(\" && raw[raw.length - 1] === \")\") {\n            let tokens = raw.substr(1, raw.length - 2).split(\" \");\n            len = parseGridLength(tokens[0]);\n            len.value = len.value || 0; // coerce 0, NaN => 0\n            min = parseInt(tokens[1]) || 0; // coerce 0, NaN => 0\n            max = parseInt(tokens[2]);\n            if (isNaN(max)) {\n                // we want to preserve 0\n                // and coerce NaN => infin\n                max = Number.POSITIVE_INFINITY;\n            }\n        } else {\n            len = parseGridLength(raw);\n        }\n\n        var actual = NaN;\n        return {\n            height: len,\n            minHeight: min,\n            maxHeight: max,\n            getActualHeight(): number {\n                return actual;\n            },\n            setActualHeight(value: number) {\n                actual = value;\n            },\n        };\n    }\n}","namespace mirage {\n    export interface IColumnDefinition {\n        width: IGridLength;\n        minWidth: number;\n        maxWidth: number;\n        getActualWidth(): number;\n\n        /// WARNING: This should only be used by engine\n        setActualWidth(value: number);\n    }\n\n    export function NewColumnDefinition(): IColumnDefinition;\n    export function NewColumnDefinition(width: string): IColumnDefinition;\n    export function NewColumnDefinition(widthValue: number, widthType: GridUnitType): IColumnDefinition;\n    export function NewColumnDefinition(width: string, minWidth: number, maxWidth: number): IColumnDefinition;\n    export function NewColumnDefinition(widthValue: number, widthType: GridUnitType, minWidth: number, maxWidth: number): IColumnDefinition;\n    export function NewColumnDefinition(): IColumnDefinition {\n        var len: IGridLength;\n        var min = 0;\n        var max = Number.POSITIVE_INFINITY;\n\n        switch (arguments.length) {\n            case 1:\n                return parseGridColDef(arguments[0]);\n            case 2:\n                len = {\n                    value: arguments[0],\n                    type: arguments[1],\n                };\n                break;\n            case 3:\n                len = parseGridLength(arguments[0]);\n                min = arguments[1];\n                max = arguments[2];\n                break;\n            case 4:\n                len = {\n                    value: arguments[0],\n                    type: arguments[1],\n                };\n                min = arguments[2];\n                max = arguments[3];\n                break;\n            default:\n                len = {\n                    value: 1,\n                    type: GridUnitType.star,\n                };\n                break;\n        }\n\n        var actual = NaN;\n        return {\n            width: len,\n            minWidth: min,\n            maxWidth: max,\n            getActualWidth(): number {\n                return actual;\n            },\n            setActualWidth(value: number) {\n                actual = value;\n            },\n        };\n    }\n\n    function parseGridColDef(raw: string): IColumnDefinition {\n        let len: IGridLength;\n        let min = 0;\n        let max = Number.POSITIVE_INFINITY;\n\n        if (raw[0] === \"(\" && raw[raw.length - 1] === \")\") {\n            let tokens = raw.substr(1, raw.length - 2).split(\" \");\n            len = parseGridLength(tokens[0]);\n            len.value = len.value || 0; // coerce 0, NaN => 0\n            min = parseInt(tokens[1]) || 0; // coerce 0, NaN => 0\n            max = parseInt(tokens[2]);\n            if (isNaN(max)) {\n                // we want to preserve 0\n                // and coerce NaN => infin\n                max = Number.POSITIVE_INFINITY;\n            }\n        } else {\n            len = parseGridLength(raw);\n        }\n\n        var actual = NaN;\n        return {\n            width: len,\n            minWidth: min,\n            maxWidth: max,\n            getActualWidth(): number {\n                return actual;\n            },\n            setActualWidth(value: number) {\n                actual = value;\n            },\n        };\n    }\n}","namespace mirage {\n    export function NewRowDefinitions(defs: string): IRowDefinition[] {\n        let rowdefs: IRowDefinition[] = [];\n        for (let walker = walkDefinitions(defs); walker.walk();) {\n            rowdefs.push(NewRowDefinition(walker.current));\n        }\n        return rowdefs;\n    }\n\n    export function NewColumnDefinitions(defs: string): IColumnDefinition[] {\n        let coldefs: IColumnDefinition[] = [];\n        for (let walker = walkDefinitions(defs); walker.walk();) {\n            coldefs.push(NewColumnDefinition(walker.current));\n        }\n        return coldefs;\n    }\n\n    interface IDefinitionWalker {\n        current: string;\n        walk(): boolean;\n    }\n    function walkDefinitions(defs: string): IDefinitionWalker {\n        let index = 0;\n        var d = {\n            current: \"\",\n            walk(): boolean {\n                if (defs[index] === \"(\") {\n                    let next = defs.indexOf(\")\", index);\n                    d.current = (next > -1)\n                        ? defs.substr(index, next - index + 1)\n                        : defs.substr(index);\n                } else {\n                    let next = defs.indexOf(\" \", index);\n                    d.current = (next > -1)\n                        ? defs.substr(index, next - index)\n                        : defs.substr(index);\n                }\n                index += d.current.length + 1;\n                return d.current && d.current != \" \";\n            },\n        };\n        return d;\n    }\n}\n","/// <reference path=\"Panel\" />\n/// <reference path=\"typeLookup\" />\n/// <reference path=\"convert/converters\" />\n/// <reference path=\"map/mappers\" />\n/// <reference path=\"IRowDefinition\" />\n/// <reference path=\"IColumnDefinition\" />\n/// <reference path=\"GridDefinitions\" />\n\nnamespace mirage {\n    export interface IGridInputs extends core.ILayoutNodeInputs {\n        rowDefinitions: IRowDefinition[];\n        columnDefinitions: IColumnDefinition[];\n    }\n\n    export interface IGridState extends core.ILayoutNodeState {\n        design: grid.design.IGridDesign;\n    }\n\n    export class Grid extends Panel {\n        static getColumn(node: core.LayoutNode): number {\n            return node.getAttached(\"grid.column\");\n        }\n\n        static setColumn(node: core.LayoutNode, value: number) {\n            node.setAttached(\"grid.column\", value);\n            invalidateCell(node);\n        }\n\n        static getColumnSpan(node: core.LayoutNode): number {\n            return node.getAttached(\"grid.column-span\");\n        }\n\n        static setColumnSpan(node: core.LayoutNode, value: number) {\n            node.setAttached(\"grid.column-span\", value);\n            invalidateCell(node);\n        }\n\n        static getRow(node: core.LayoutNode): number {\n            return node.getAttached(\"grid.row\");\n        }\n\n        static setRow(node: core.LayoutNode, value: number) {\n            node.setAttached(\"grid.row\", value);\n            invalidateCell(node);\n        }\n\n        static getRowSpan(node: core.LayoutNode): number {\n            return node.getAttached(\"grid.row-span\");\n        }\n\n        static setRowSpan(node: core.LayoutNode, value: number) {\n            node.setAttached(\"grid.row-span\", value);\n            invalidateCell(node);\n        }\n\n        inputs: IGridInputs;\n        state: IGridState;\n\n        private $measureOverride: core.IMeasureOverride;\n        private $arrangeOverride: core.IArrangeOverride;\n\n        init() {\n            super.init();\n            this.$measureOverride = grid.NewGridMeasureOverride(this.inputs, this.state, this.tree);\n            this.$arrangeOverride = grid.NewGridArrangeOverride(this.inputs, this.state, this.tree);\n        }\n\n        get rowDefinitions(): IRowDefinition[] {\n            return this.inputs.rowDefinitions;\n        }\n\n        set rowDefinitions(value: IRowDefinition[]) {\n            if (!value)\n                value = [];\n            this.inputs.rowDefinitions = value;\n            this.invalidateMeasure();\n        }\n\n        get columnDefinitions(): IColumnDefinition[] {\n            return this.inputs.columnDefinitions;\n        }\n\n        set columnDefinitions(value: IColumnDefinition[]) {\n            if (!value)\n                value = [];\n            this.inputs.columnDefinitions = value;\n            this.invalidateMeasure();\n        }\n\n        protected createInputs(): IGridInputs {\n            var inputs = <IGridInputs>super.createInputs();\n            inputs.rowDefinitions = [];\n            inputs.columnDefinitions = [];\n            return inputs;\n        }\n\n        protected createState(): IGridState {\n            var state = <IGridState>super.createState();\n            state.design = grid.design.NewGridDesign();\n            return state;\n        }\n\n        protected measureOverride(constraint: ISize): ISize {\n            return this.$measureOverride(constraint);\n        }\n\n        protected arrangeOverride(arrangeSize: ISize): ISize {\n            return this.$arrangeOverride(arrangeSize);\n        }\n    }\n    registerNodeType(\"grid\", Grid);\n    convert.register(\"row-definitions\", NewRowDefinitions);\n    convert.register(\"column-definitions\", NewColumnDefinitions);\n    convert.register(\"grid.row\", convertGridCell);\n    convert.register(\"grid.row-span\", convertGridCell);\n    convert.register(\"grid.column\", convertGridCell);\n    convert.register(\"grid.column-span\", convertGridCell);\n    map.registerNormal(\"row-definitions\", \"rowDefinitions\");\n    map.registerNormal(\"column-definitions\", \"columnDefinitions\");\n    map.registerCustom(\"grid.row\", Grid.setRow);\n    map.registerCustom(\"grid.row-span\", Grid.setRowSpan);\n    map.registerCustom(\"grid.column\", Grid.setColumn);\n    map.registerCustom(\"grid.column-span\", Grid.setColumnSpan);\n\n    function invalidateCell(node: core.LayoutNode) {\n        var parent = node.tree.parent;\n        if (parent instanceof Grid)\n            parent.invalidateMeasure();\n        node.invalidateMeasure();\n    }\n\n    function convertGridCell(value: string): number {\n        if (!value)\n            return 0;\n        return parseInt(value);\n    }\n}","namespace mirage {\n    export enum GridUnitType {\n        auto = 0,\n        pixel = 1,\n        star = 2,\n    }\n\n    export interface IGridLength {\n        value: number;\n        type: GridUnitType;\n    }\n\n    export function parseGridLength(s: string): IGridLength {\n        var auto = {value: 0, type: GridUnitType.auto};\n        if (s === \"auto\") {\n            return auto;\n        }\n        if (s[s.length - 1] === \"*\") {\n            if (s.length === 1)\n                return {value: 1, type: GridUnitType.star};\n            return {\n                value: parseInt(s.substr(0, s.length - 1)),\n                type: GridUnitType.star,\n            };\n        }\n        return {\n            value: parseInt(s),\n            type: GridUnitType.pixel,\n        };\n    }\n}","namespace mirage.adapters {\n    export interface IRenderAdapter {\n        updateSlots(updates: draft.ISlotUpdate[]);\n    }\n\n    var registered: IRenderAdapter[] = [];\n\n    export function register(adapter: IRenderAdapter) {\n        if (registered.indexOf(adapter) < 0) {\n            registered.push(adapter);\n        }\n    }\n\n    export function unregister(adapter: IRenderAdapter) {\n        var index = registered.indexOf(adapter);\n        if (index > -1)\n            registered.splice(index, 1);\n    }\n\n    export function updateSlots(updates: draft.ISlotUpdate[]) {\n        for (var i = 0; i < registered.length; i++) {\n            registered[i].updateSlots(updates);\n        }\n    }\n}","namespace mirage {\r\n    export interface IPoint {\r\n        x: number;\r\n        y: number;\r\n    }\r\n\r\n    export class Point implements IPoint {\r\n        x: number;\r\n        y: number;\r\n\r\n        constructor(x?: number, y?: number) {\r\n            this.x = x == null ? 0 : x;\r\n            this.y = y == null ? 0 : y;\r\n        }\r\n\r\n        static isEqual(p1: IPoint, p2: IPoint): boolean {\r\n            return p1.x === p2.x\r\n                && p1.y === p2.y;\r\n        }\r\n\r\n        static copyTo(src: IPoint, dest: IPoint) {\r\n            dest.x = src.x;\r\n            dest.y = src.y;\r\n        }\r\n\r\n        static round(dest: IPoint) {\r\n            dest.x = Math.round(dest.x);\r\n            dest.y = Math.round(dest.y);\r\n        }\r\n    }\r\n}","namespace mirage {\r\n    export interface IRect extends IPoint, ISize {\r\n    }\r\n\r\n    export class Rect implements IRect {\r\n        x: number;\r\n        y: number;\r\n        width: number;\r\n        height: number;\r\n\r\n        constructor(x?: number, y?: number, width?: number, height?: number) {\r\n            this.x = x == null ? 0 : x;\r\n            this.y = y == null ? 0 : y;\r\n            this.width = width == null ? 0 : width;\r\n            this.height = height == null ? 0 : height;\r\n        }\r\n\r\n        static clear(rect: IRect) {\r\n            rect.x = rect.y = rect.width = rect.height = 0;\r\n        }\r\n\r\n        static isEqual(rect1: IRect, rect2: IRect): boolean {\r\n            return rect1.x === rect2.x\r\n                && rect1.y === rect2.y\r\n                && rect1.width === rect2.width\r\n                && rect1.height === rect2.height;\r\n        }\r\n\r\n        static isEmpty(src: IRect): boolean {\r\n            return src.width === 0\r\n                || src.height === 0;\r\n        }\r\n\r\n        static copyTo(src: IRect, dest: IRect) {\r\n            dest.x = src.x;\r\n            dest.y = src.y;\r\n            dest.width = src.width;\r\n            dest.height = src.height;\r\n        }\r\n\r\n        static isUndef(rect: IRect): boolean {\r\n            return isNaN(rect.x)\r\n                && isNaN(rect.y)\r\n                && isNaN(rect.width)\r\n                && isNaN(rect.height);\r\n        }\r\n\r\n        static undef(rect: IRect) {\r\n            rect.x = NaN;\r\n            rect.y = NaN;\r\n            rect.width = NaN;\r\n            rect.height = NaN;\r\n        }\r\n    }\r\n}","namespace mirage {\r\n    export interface ISize {\r\n        width: number;\r\n        height: number;\r\n    }\r\n\r\n    export class Size implements ISize {\r\n        width: number;\r\n        height: number;\r\n\r\n        constructor(width?: number, height?: number) {\r\n            this.width = width == null ? 0 : width;\r\n            this.height = height == null ? 0 : height;\r\n        }\r\n\r\n        static copyTo(src: ISize, dest: ISize) {\r\n            dest.width = src.width;\r\n            dest.height = src.height;\r\n        }\r\n\r\n        static isEqual(size1: ISize, size2: ISize): boolean {\r\n            return size1.width === size2.width\r\n                && size1.height === size2.height;\r\n        }\r\n\r\n        static isEmpty(size: Size): boolean {\r\n            return size.width === 0\r\n                || size.height === 0;\r\n        }\r\n\r\n        static max(dest: ISize, size2: ISize) {\r\n            dest.width = Math.max(dest.width, size2.width);\r\n            dest.height = Math.max(dest.height, size2.height);\r\n        }\r\n\r\n        static min(dest: ISize, size2: ISize) {\r\n            dest.width = Math.min(dest.width, size2.width);\r\n            dest.height = Math.min(dest.height, size2.height);\r\n        }\r\n\r\n        static round(size: ISize) {\r\n            size.width = Math.round(size.width);\r\n            size.height = Math.round(size.height);\r\n        }\r\n\r\n        static clear(size: ISize) {\r\n            size.width = 0;\r\n            size.height = 0;\r\n        }\r\n\r\n        static isUndef(size: ISize): boolean {\r\n            return isNaN(size.width)\r\n                && isNaN(size.height);\r\n        }\r\n\r\n        static undef(size: ISize) {\r\n            size.width = NaN;\r\n            size.height = NaN;\r\n        }\r\n    }\r\n}","/// <reference path=\"../convert/converters\" />\n\nnamespace mirage.core {\n    function booleanDefaultTrue(value: string): boolean {\n        return value !== \"0\"\n            && value !== \"false\";\n    }\n\n    function float(value: string): number {\n        if (!value)\n            return 0;\n        return parseFloat(value) || 0;\n    }\n\n    function floatDefaultNaN(value: string): number {\n        if (!value)\n            return NaN;\n        return parseFloat(value);\n    }\n\n    function floatDefaultInfinite(value: string): number {\n        if (!value)\n            return Number.POSITIVE_INFINITY;\n        let val = parseFloat(value);\n        if (isNaN(val))\n            return Number.POSITIVE_INFINITY;\n        return val;\n    }\n\n    function thickness(value: string): Thickness {\n        let tokens = splitCommaList(value);\n        if (tokens.length === 1) {\n            let uniform = parseFloat(tokens[0]);\n            return new Thickness(uniform, uniform, uniform, uniform);\n        } else if (tokens.length === 2) {\n            let x = parseFloat(tokens[0]);\n            let y = parseFloat(tokens[1]);\n            return new Thickness(x, y, x, y);\n        } else if (tokens.length === 4) {\n            return new Thickness(\n                parseFloat(tokens[0]),\n                parseFloat(tokens[1]),\n                parseFloat(tokens[2]),\n                parseFloat(tokens[3])\n            );\n        } else {\n            console.warn(\"[mirage] Invalid thickness value\", value);\n        }\n    }\n\n    export function enumConverter(src: any): (value: string) => any {\n        return (value: string): any => {\n            if (!value)\n                return 0;\n            return src[value] || 0;\n        };\n    }\n\n    function splitCommaList(str: string): string[] {\n        var tokens: string[] = [];\n        for (var i = 0, arr = str.split(' ').join(',').split(','); i < arr.length; i++) {\n            var cur = arr[i];\n            if (cur)\n                tokens.push(cur);\n        }\n        return tokens;\n    }\n\n    convert.register(\"visible\", booleanDefaultTrue);\n    convert.register(\"use-layout-rounding\", booleanDefaultTrue);\n    convert.register(\"margin\", thickness);\n    convert.register(\"width\", floatDefaultNaN);\n    convert.register(\"height\", floatDefaultNaN);\n    convert.register(\"min-width\", float);\n    convert.register(\"min-height\", float);\n    convert.register(\"max-width\", floatDefaultInfinite);\n    convert.register(\"max-height\", floatDefaultInfinite);\n    convert.register(\"horizontal-alignment\", enumConverter(HorizontalAlignment));\n    convert.register(\"vertical-alignment\", enumConverter(VerticalAlignment));\n}","/// <reference path=\"typeLookup\" />\n/// <reference path=\"convert/converters\" />\n/// <reference path=\"core/converters\" />\n/// <reference path=\"map/mappers\" />\n\nnamespace mirage {\n    export interface IStackPanelInputs extends core.ILayoutNodeInputs {\n        orientation: Orientation;\n    }\n\n    export class StackPanel extends Panel {\n        inputs: IStackPanelInputs;\n\n        get orientation(): Orientation {\n            return this.inputs.orientation;\n        }\n\n        set orientation(value: Orientation) {\n            value = value || 0; // coerce null, undefined, 0 => 0\n            if (this.inputs.orientation === value)\n                return;\n            this.inputs.orientation = value;\n            this.invalidateMeasure();\n            this.invalidateArrange();\n        }\n\n        protected createInputs(): IStackPanelInputs {\n            var inputs = <IStackPanelInputs>super.createInputs();\n            inputs.orientation = Orientation.horizontal;\n            return inputs;\n        }\n\n        protected measureOverride(constraint: ISize): ISize {\n            if (this.inputs.orientation === Orientation.vertical) {\n                return this.measureVertical(constraint);\n            } else {\n                return this.measureHorizontal(constraint);\n            }\n        }\n\n        private measureVertical(constraint: ISize): ISize {\n            var ca = new Size(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n            var measured = new Size();\n            var inputs = this.inputs;\n\n            ca.width = constraint.width;\n            if (!isNaN(inputs.width))\n                ca.width = inputs.width;\n            ca.width = Math.min(ca.width, inputs.maxWidth);\n            ca.width = Math.max(ca.width, inputs.minWidth);\n\n            for (var walker = this.tree.walk(); walker.step();) {\n                var child = walker.current;\n                child.measure(ca);\n\n                var childDesired = child.state.desiredSize;\n                measured.height += childDesired.height;\n                measured.width = Math.max(measured.width, childDesired.width);\n            }\n\n            return measured;\n        }\n\n        private measureHorizontal(constraint: ISize): ISize {\n            var ca = new Size(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n            var measured = new Size();\n            var inputs = this.inputs;\n\n            ca.height = constraint.height;\n            if (!isNaN(inputs.height))\n                ca.height = inputs.height;\n            ca.height = Math.min(ca.height, inputs.maxHeight);\n            ca.height = Math.max(ca.height, inputs.minHeight);\n\n            for (var walker = this.tree.walk(); walker.step();) {\n                var child = walker.current;\n                child.measure(ca);\n\n                var childDesired = child.state.desiredSize;\n                measured.width += childDesired.width;\n                measured.height = Math.max(measured.height, childDesired.height);\n            }\n\n            return measured;\n        }\n\n        protected arrangeOverride(arrangeSize: ISize): ISize {\n            if (this.inputs.orientation === Orientation.vertical) {\n                return this.arrangeVertical(arrangeSize);\n            } else {\n                return this.arrangeHorizontal(arrangeSize);\n            }\n        }\n\n        private arrangeVertical(arrangeSize: ISize): ISize {\n            var arranged = new Size(arrangeSize.width, 0);\n\n            for (var walker = this.tree.walk(); walker.step();) {\n                var child = walker.current;\n                var childDesired = child.state.desiredSize;\n                var childFinal = new Rect(0, arranged.height, arrangeSize.width, childDesired.height);\n                if (Rect.isEmpty(childFinal))\n                    Rect.clear(childFinal);\n\n                child.arrange(childFinal);\n\n                arranged.width = Math.max(arranged.width, arrangeSize.width);\n                arranged.height += childDesired.height;\n            }\n\n            arranged.height = Math.max(arranged.height, arrangeSize.height);\n\n            return arranged;\n        }\n\n        private arrangeHorizontal(arrangeSize: ISize): ISize {\n            var arranged = new Size(0, arrangeSize.height);\n\n            for (var walker = this.tree.walk(); walker.step();) {\n                var child = walker.current;\n                var childDesired = child.state.desiredSize;\n                var childFinal = new Rect(arranged.width, 0, childDesired.width, arrangeSize.height);\n                if (Rect.isEmpty(childFinal))\n                    Rect.clear(childFinal);\n\n                child.arrange(childFinal);\n\n                arranged.width += childDesired.width;\n                arranged.height = Math.max(arranged.height, arrangeSize.height);\n            }\n\n            arranged.width = Math.max(arranged.width, arrangeSize.width);\n\n            return arranged;\n        }\n    }\n    registerNodeType(\"stack-panel\", StackPanel);\n    convert.register(\"orientation\", core.enumConverter(Orientation));\n    map.registerNormal(\"orientation\", \"orientation\");\n}","namespace mirage.core {\n    export interface IArranger {\n        (finalRect: Rect): boolean;\n    }\n    export interface IArrangeOverride {\n        (finalSize: ISize): ISize;\n    }\n\n    export function NewArranger(inputs: ILayoutNodeInputs, state: ILayoutNodeState, tree: ILayoutTree, override: IArrangeOverride): IArranger {\n        function calcOffer(childRect: IRect): ISize {\n            var stretched = new Size(childRect.width, childRect.height);\n            coerceSize(stretched, inputs);\n\n            var framework = new Size();\n            coerceSize(framework, inputs);\n            if (inputs.horizontalAlignment === HorizontalAlignment.stretch) {\n                framework.width = Math.max(framework.width, stretched.width);\n            }\n            if (inputs.verticalAlignment === VerticalAlignment.stretch) {\n                framework.height = Math.max(framework.height, stretched.height);\n            }\n            var offer = new Size(state.hiddenDesire.width, state.hiddenDesire.height);\n            Size.max(offer, framework);\n            return offer;\n        }\n\n        function calcVisualOffset(childRect: IRect, arranged: ISize): IPoint {\n            var constrained = new Size(arranged.width, arranged.height);\n            coerceSize(constrained, inputs);\n            Size.min(constrained, arranged);\n\n            var vo = new Point();\n            Point.copyTo(childRect, vo);\n            switch (inputs.horizontalAlignment) {\n                case HorizontalAlignment.left:\n                    break;\n                case HorizontalAlignment.right:\n                    vo.x += childRect.width - constrained.width;\n                    break;\n                case HorizontalAlignment.center:\n                    vo.x += (childRect.width - constrained.width) * 0.5;\n                    break;\n                default:\n                    vo.x += Math.max((childRect.width - constrained.width) * 0.5, 0);\n                    break;\n            }\n            switch (inputs.verticalAlignment) {\n                case VerticalAlignment.top:\n                    break;\n                case VerticalAlignment.bottom:\n                    vo.y += childRect.height - constrained.height;\n                    break;\n                case VerticalAlignment.center:\n                    vo.y += (childRect.height - constrained.height) * 0.5;\n                    break;\n                default:\n                    vo.y += Math.max((childRect.height - constrained.height) * 0.5, 0);\n                    break;\n            }\n            if (inputs.useLayoutRounding) {\n                Point.round(vo);\n            }\n            return vo;\n        }\n\n        return function (finalRect: Rect): boolean {\n            if (inputs.visible !== true) {\n                return false;\n            }\n\n            // Apply rounding\n            let childRect = new Rect();\n            if (inputs.useLayoutRounding) {\n                childRect.x = Math.round(finalRect.x);\n                childRect.y = Math.round(finalRect.y);\n                childRect.width = Math.round(finalRect.width);\n                childRect.height = Math.round(finalRect.height);\n            } else {\n                Rect.copyTo(finalRect, childRect);\n            }\n\n            // Validate\n            if (childRect.width < 0 || childRect.height < 0\n                || !isFinite(childRect.width) || !isFinite(childRect.height)\n                || isNaN(childRect.x) || isNaN(childRect.y)\n                || isNaN(childRect.width) || isNaN(childRect.height)) {\n                console.warn(\"[mirage] cannot call arrange using rect with NaN/infinite values.\");\n                return false;\n            }\n\n            // Check need to arrange\n            let doarrange = (state.flags & LayoutFlags.arrange) > 0\n                || !Rect.isEqual(state.layoutSlot, childRect);\n            if (!doarrange)\n                return false;\n            Rect.copyTo(childRect, state.layoutSlot);\n\n            // Prepare offer\n            Thickness.shrinkRect(inputs.margin, childRect);\n            var offer = calcOffer(childRect);\n\n            // Do override\n            var arranged = override(offer);\n\n            // Complete override\n            state.flags &= ~LayoutFlags.arrange;\n            if (inputs.useLayoutRounding) {\n                Size.round(arranged);\n            }\n\n            // Calculate visual offset\n            var vo = calcVisualOffset(childRect, arranged);\n\n            // If arranged slot moved, invalidate slotting\n            if (!Point.isEqual(vo, state.arrangedSlot) || !Size.isEqual(arranged, state.arrangedSlot)) {\n                Rect.copyTo(state.arrangedSlot, state.lastArrangedSlot);\n                state.flags |= LayoutFlags.slotHint;\n                tree.propagateFlagUp(LayoutFlags.slotHint);\n            }\n\n            // Finalize arrangedSlot\n            Size.copyTo(arranged, state.arrangedSlot);\n            Point.copyTo(vo, state.arrangedSlot);\n\n            return true;\n        }\n    }\n}","namespace mirage.core {\n    export function DefaultLayoutTree(): ILayoutTree {\n        return {\n            parent: null,\n            applyTemplate(): boolean {\n                return true;\n            },\n            propagateFlagUp(flag: LayoutFlags) {\n                for (var cur: LayoutNode = this.parent; !!cur && (cur.state.flags & flag) <= 0; cur = cur.tree.parent) {\n                    cur.state.flags |= flag;\n                }\n            },\n            walk(reverse?: boolean): ILayoutTreeWalker {\n                return {\n                    current: undefined,\n                    step(): boolean {\n                        return false;\n                    },\n                }\n            },\n        };\n    }\n}","namespace mirage.core {\n    export enum LayoutFlags {\n        none = 0,\n\n        measure = 1 << 1,\n        arrange = 1 << 2,\n\n        measureHint = 1 << 3,\n        arrangeHint = 1 << 4,\n        slotHint    = 1 << 5,\n        hints       = measureHint | arrangeHint | slotHint,\n    }\n}\n","/// <reference path=\"converters\" />\n\nnamespace mirage.core {\n    map.registerNormal(\"visible\", \"visible\");\n    map.registerNormal(\"use-layout-rounding\", \"useLayoutRounding\");\n    map.registerNormal(\"margin\", \"margin\");\n    map.registerNormal(\"width\", \"width\");\n    map.registerNormal(\"height\", \"height\");\n    map.registerNormal(\"min-width\", \"minWidth\");\n    map.registerNormal(\"min-height\", \"minHeight\");\n    map.registerNormal(\"max-width\", \"maxWidth\");\n    map.registerNormal(\"max-height\", \"maxHeight\");\n    map.registerNormal(\"horizontal-alignment\", \"horizontalAlignment\");\n    map.registerNormal(\"vertical-alignment\", \"verticalAlignment\");\n}","namespace mirage.core {\n    export interface IMeasurer {\n        (availableSize: ISize): boolean;\n    }\n    export interface IMeasureOverride {\n        (coreSize: ISize): Size;\n    }\n\n    export function NewMeasurer(inputs: ILayoutNodeInputs, state: ILayoutNodeState, tree: ILayoutTree, override: IMeasureOverride): IMeasurer {\n        return function (availableSize: ISize): boolean {\n            // Validate\n            if (isNaN(availableSize.width) || isNaN(availableSize.height)) {\n                console.warn(\"[mirage] cannot call measure using a size with NaN values.\");\n                return false;\n            }\n            if (inputs.visible !== true) {\n                return false;\n            }\n\n            // Check need to measure\n            var domeasure = (state.flags & LayoutFlags.measure) > 0;\n            var last = state.lastAvailable;\n            domeasure = domeasure || (Size.isUndef(last) || !Size.isEqual(last, availableSize));\n            Size.copyTo(availableSize, last);\n\n            // Apply Template\n            tree.applyTemplate();\n\n            if (!domeasure)\n                return false;\n\n            // Invalidate downstream\n            state.flags |= (LayoutFlags.arrange | LayoutFlags.arrangeHint);\n            tree.propagateFlagUp(LayoutFlags.arrangeHint);\n\n            // Prepare for override\n            var framedSize = new Size(availableSize.width, availableSize.height);\n            Thickness.shrinkSize(inputs.margin, framedSize);\n            coerceSize(framedSize, inputs);\n\n            // Do override\n            var desired = override(framedSize);\n\n            // Complete override\n            state.flags &= ~LayoutFlags.measure;\n            Size.copyTo(desired, state.hiddenDesire);\n\n            // Finish desired\n            coerceSize(desired, inputs);\n            Thickness.growSize(inputs.margin, desired);\n\n            desired.width = Math.min(desired.width, availableSize.width);\n            desired.height = Math.min(desired.height, availableSize.height);\n            if (inputs.useLayoutRounding) {\n                Size.round(desired);\n            }\n\n            let change = !Size.isEqual(desired, state.desiredSize);\n            Size.copyTo(desired, state.desiredSize);\n            return change;\n        };\n    }\n}","namespace mirage.core {\n    export interface ISized {\n        width: number;\n        height: number;\n        minWidth: number;\n        minHeight: number;\n        maxWidth: number;\n        maxHeight: number;\n        useLayoutRounding: boolean;\n    }\n\n    export function coerceSize(size: ISize, inputs: ISized) {\n        var cw = Math.max(inputs.minWidth, size.width);\n        var ch = Math.max(inputs.minHeight, size.height);\n\n        if (!isNaN(inputs.width))\n            cw = inputs.width;\n\n        if (!isNaN(inputs.height))\n            ch = inputs.height;\n\n        cw = Math.max(Math.min(cw, inputs.maxWidth), inputs.minWidth);\n        ch = Math.max(Math.min(ch, inputs.maxHeight), inputs.minHeight);\n\n        if (inputs.useLayoutRounding) {\n            cw = Math.round(cw);\n            ch = Math.round(ch);\n        }\n\n        size.width = cw;\n        size.height = ch;\n    }\n}","/// <reference path=\"../core/LayoutFlags\" />\n\nnamespace mirage.draft {\n    import LayoutFlags = mirage.core.LayoutFlags;\n\n    export interface IArrangeDrafter {\n        flush();\n        prepare(): boolean;\n        draft(rootSize: ISize): boolean;\n    }\n\n    export function NewArrangeDrafter(node: core.LayoutNode): IArrangeDrafter {\n        var arrangeList: core.LayoutNode[] = [];\n\n        return {\n            flush() {\n                var cur: core.LayoutNode;\n                while ((cur = arrangeList.shift()) != null) {\n                    cur.tree.propagateFlagUp(LayoutFlags.arrangeHint);\n                }\n            },\n            prepare(): boolean {\n                for (var walker = node.walkDeep(); walker.step();) {\n                    var cur = walker.current;\n                    if (!cur.inputs.visible) {\n                        walker.skipBranch();\n                        continue;\n                    }\n\n                    if ((cur.state.flags & LayoutFlags.arrangeHint) === 0) {\n                        walker.skipBranch();\n                        continue;\n                    }\n\n                    cur.state.flags &= ~LayoutFlags.arrangeHint;\n                    if ((cur.state.flags & LayoutFlags.arrange) > 0) {\n                        arrangeList.push(cur);\n                    }\n                }\n                return arrangeList.length > 0;\n            },\n            draft(rootSize: ISize): boolean {\n                var cur: core.LayoutNode;\n                while ((cur = arrangeList.shift()) != null) {\n                    cur.doArrange(rootSize);\n                }\n                return true;\n            },\n        }\n    }\n}","/// <reference path=\"../core/LayoutFlags\" />\n\nnamespace mirage.draft {\n    import LayoutFlags = mirage.core.LayoutFlags;\n\n    var MAX_COUNT = 255;\n\n    export interface IDrafter {\n        (updater: IDraftUpdater, rootSize: ISize): boolean;\n    }\n\n    export interface IDraftUpdater {\n        updateSlots(updates: draft.ISlotUpdate[]);\n    }\n\n    export function NewDrafter(node: core.LayoutNode): IDrafter {\n        var measure = NewMeasureDrafter(node);\n        var arrange = NewArrangeDrafter(node);\n        var slot = NewSlotDrafter(node);\n\n        /// Every pass at runDraft will exclusively run measure, arrange, or size\n        /// true should be returned if any updates were made\n        function runDraft(updater: IDraftUpdater, rootSize: ISize): boolean {\n            if (!node.inputs.visible)\n                return false;\n\n            arrange.flush();\n            slot.flush();\n\n            var flags = node.state.flags;\n            if ((flags & LayoutFlags.measureHint) > 0) {\n                return measure.prepare()\n                    && measure.draft(rootSize);\n            }\n            if ((flags & LayoutFlags.arrangeHint) > 0) {\n                return arrange.prepare()\n                    && arrange.draft(rootSize);\n            }\n            if ((flags & LayoutFlags.slotHint) > 0) {\n                return slot.prepare()\n                    && slot.draft()\n                    && slot.notify(updater);\n            }\n\n            return false;\n        }\n\n        return function (updater: IDraftUpdater, rootSize: ISize): boolean {\n            if ((node.state.flags & LayoutFlags.hints) === 0)\n                return false;\n            var updated = false;\n            var count = 0;\n            for (; count < MAX_COUNT; count++) {\n                if (!runDraft(updater, rootSize))\n                    break;\n                updated = true;\n            }\n            if (count >= MAX_COUNT) {\n                console.error(\"[mirage] aborting infinite draft\");\n            }\n            return updated;\n        };\n    }\n}","/// <reference path=\"../core/LayoutFlags\" />\n\nnamespace mirage.draft {\n    import LayoutFlags = mirage.core.LayoutFlags;\n\n    export interface IMeasureDrafter {\n        prepare(): boolean;\n        draft(rootSize: ISize): boolean;\n    }\n\n    export function NewMeasureDrafter(node: core.LayoutNode): IMeasureDrafter {\n        var measureList: core.LayoutNode[] = [];\n\n        return {\n            prepare(): boolean {\n                for (var walker = node.walkDeep(); walker.step();) {\n                    var cur = walker.current;\n                    if (!cur.inputs.visible) {\n                        walker.skipBranch();\n                        continue;\n                    }\n\n                    if ((cur.state.flags & LayoutFlags.measureHint) === 0) {\n                        walker.skipBranch();\n                        continue;\n                    }\n\n                    cur.state.flags &= ~LayoutFlags.measureHint;\n                    if ((cur.state.flags & LayoutFlags.measure) > 0) {\n                        measureList.push(cur);\n                    }\n                }\n\n                return measureList.length > 0;\n            },\n            draft(rootSize: ISize): boolean {\n                var cur: core.LayoutNode;\n                while ((cur = measureList.shift()) != null) {\n                    cur.doMeasure(rootSize);\n                }\n                return true;\n            },\n        };\n    }\n}","/// <reference path=\"../core/LayoutFlags\" />\n\nnamespace mirage.draft {\n    import LayoutFlags = mirage.core.LayoutFlags;\n\n    export interface ISlotDrafter {\n        flush();\n        prepare(): boolean;\n        draft(): boolean;\n        notify(updater: IDraftUpdater): boolean;\n    }\n\n    export interface ISlotUpdate {\n        node: core.LayoutNode;\n        oldRect: IRect;\n        newRect: IRect;\n    }\n\n    export function NewSlotDrafter(node: core.LayoutNode): ISlotDrafter {\n        var slotList: core.LayoutNode[] = [];\n        var slotUpdates: ISlotUpdate[] = [];\n\n        return {\n            flush() {\n                var cur: core.LayoutNode;\n                while ((cur = slotList.shift()) != null) {\n                    cur.tree.propagateFlagUp(LayoutFlags.slotHint);\n                }\n            },\n            prepare(): boolean {\n                for (var walker = node.walkDeep(); walker.step();) {\n                    var cur = walker.current;\n                    if (!cur.inputs.visible) {\n                        walker.skipBranch();\n                        continue;\n                    }\n\n                    if ((cur.state.flags & LayoutFlags.slotHint) === 0) {\n                        walker.skipBranch();\n                        continue;\n                    }\n\n                    cur.state.flags &= ~LayoutFlags.slotHint;\n                    if (!Rect.isUndef(cur.state.lastArrangedSlot)) {\n                        slotList.push(cur);\n                    }\n                }\n                return slotList.length > 0;\n            },\n            draft(): boolean {\n                var oldRect = new Rect();\n                var newRect = new Rect();\n                var cur: core.LayoutNode;\n                while ((cur = slotList.pop()) != null) {\n                    cur.slot(oldRect, newRect);\n                    if (!Rect.isEqual(oldRect, newRect)) {\n                        slotUpdates.push({\n                            node: cur,\n                            oldRect: oldRect,\n                            newRect: newRect,\n                        });\n                        oldRect = new Rect();\n                        newRect = new Rect();\n                    }\n                }\n                return slotUpdates.length > 0;\n            },\n            notify(updater: IDraftUpdater): boolean {\n                updater.updateSlots(slotUpdates);\n                return true;\n            }\n        };\n    }\n}","namespace mirage.grid {\n    export function NewGridArrangeOverride(inputs: IGridInputs, state: IGridState, tree: IPanelTree): core.IArrangeOverride {\n        var des = state.design.arrange;\n\n        return function (arrangeSize: ISize): ISize {\n            des.init(arrangeSize, inputs.columnDefinitions, inputs.rowDefinitions);\n\n            var cr = new Rect();\n            for (var walker = tree.walk(); walker.step();) {\n                var child = walker.current;\n                des.calcChildRect(cr, child);\n                child.arrange(cr);\n            }\n\n            return new Size(arrangeSize.width, arrangeSize.height);\n        };\n    }\n}","namespace mirage.grid {\n    export function NewGridMeasureOverride(inputs: IGridInputs, state: IGridState, tree: IPanelTree): core.IMeasureOverride {\n        var des = state.design.measure;\n\n        var overrideAutoAuto = design.NewMeasureOverridePass(design.MeasureOverridePass.autoAuto, des, tree);\n        var overrideStarAuto = design.NewMeasureOverridePass(design.MeasureOverridePass.starAuto, des, tree);\n        var overrideAutoStar = design.NewMeasureOverridePass(design.MeasureOverridePass.autoStar, des, tree);\n        var overrideStarAuto2 = design.NewMeasureOverridePass(design.MeasureOverridePass.starAutoAgain, des, tree);\n        var overrideNonStar = design.NewMeasureOverridePass(design.MeasureOverridePass.nonStar, des, tree);\n        var overrideRemainingStar = design.NewMeasureOverridePass(design.MeasureOverridePass.remainingStar, des, tree);\n\n        return function (constraint: ISize): ISize {\n            des.init(inputs.columnDefinitions, inputs.rowDefinitions, tree);\n            overrideAutoAuto(constraint);\n            overrideStarAuto(constraint);\n            overrideAutoStar(constraint);\n            overrideStarAuto2(constraint);\n            overrideNonStar(constraint);\n            overrideRemainingStar(constraint);\n            des.finish();\n            return des.getDesired();\n        };\n    }\n}","namespace mirage.logging {\n    export function NewConsoleLogger(getNodeDescriptor?: (node: core.LayoutNode) => string): ILogger {\n        let curindent = \"\";\n\n        function indent() {\n            curindent += \"  \";\n        }\n\n        function unindent() {\n            curindent = curindent.substr(0, curindent.length - 2);\n        }\n\n        getNodeDescriptor = getNodeDescriptor || function (node): string {\n                let type = <any>node.constructor;\n                return `${type.name}`;\n            };\n\n        return {\n            doMeasure(node: core.LayoutNode){\n                console.log(`[do-measure]`);\n            },\n            measure(node: core.LayoutNode, constraint: ISize){\n                console.log(`${curindent}${getNodeDescriptor(node)} => (${constraint.width} ${constraint.height}) [measure]`);\n                indent();\n            },\n            finishMeasure(node: core.LayoutNode){\n                unindent();\n                let desired = node.state.desiredSize;\n                console.log(`${curindent}${getNodeDescriptor(node)} <= (${desired.width} ${desired.height}) [finish-measure]`);\n            },\n            doArrange(node: core.LayoutNode){\n                console.log(`[do-arrange]`);\n            },\n            arrange(node: core.LayoutNode, final: IRect){\n                console.log(`${curindent}${getNodeDescriptor(node)} => (${final.x} ${final.y} ${final.width} ${final.height}) [arrange]`);\n                indent();\n            },\n            finishArrange(node: core.LayoutNode){\n                unindent();\n                let slot = node.state.arrangedSlot;\n                console.log(`${curindent}${getNodeDescriptor(node)} <= (${slot.x} ${slot.y} ${slot.width} ${slot.height}) [finish-arrange]`);\n            },\n        }\n    }\n}","namespace mirage.logging {\n    export function NewNoLogger(): ILogger {\n        return {\n            doMeasure(node: core.LayoutNode){\n            },\n            measure(node: core.LayoutNode, constraint: ISize){\n            },\n            finishMeasure(node: core.LayoutNode){\n            },\n            doArrange(node: core.LayoutNode){\n            },\n            arrange(node: core.LayoutNode, finalRect: IRect){\n            },\n            finishArrange(node: core.LayoutNode){\n            },\n        };\n    }\n}","/// <reference path=\"NoLogger\" />\n\nnamespace mirage {\n    export var logger = logging.NewNoLogger();\n}","namespace mirage.grid.design {\n    export interface IGridArrangeDesign {\n        init(arrangeSize: ISize, coldefs: IColumnDefinition[], rowdefs: IRowDefinition[]);\n        calcChildRect(childRect: IRect, child: core.LayoutNode);\n    }\n\n    export function NewGridArrangeDesign(cm: Segment[][], rm: Segment[][]): IGridArrangeDesign {\n        return {\n            init(arrangeSize: ISize, coldefs: IColumnDefinition[], rowdefs: IRowDefinition[]) {\n                originalToOffered(cm);\n                originalToOffered(rm);\n\n                var consumed = new Size(helpers.calcDesiredToOffered(cm), helpers.calcDesiredToOffered(rm));\n\n                if (consumed.width !== arrangeSize.width) {\n                    helpers.expand(arrangeSize.width, cm);\n                }\n                if (consumed.height !== arrangeSize.height) {\n                    helpers.expand(arrangeSize.height, rm);\n                }\n\n                if (!!coldefs) {\n                    for (var i = 0; i < coldefs.length; i++) {\n                        coldefs[i].setActualWidth(cm[i][i].offered);\n                    }\n                }\n                if (!!rowdefs) {\n                    for (var i = 0; i < rowdefs.length; i++) {\n                        rowdefs[i].setActualHeight(rm[i][i].offered);\n                    }\n                }\n            },\n            calcChildRect(childRect: IRect, child: core.LayoutNode) {\n                Rect.clear(childRect);\n\n                var col = Grid.getColumn(child) || 0; //coerce NaN, undefined, null, 0 => 0\n                col = Math.min(col, cm.length - 1);\n\n                var colspan = Grid.getColumnSpan(child);\n                if (colspan !== 0)\n                    colspan = colspan || 1; //coerce NaN, undefined, null => 1\n                colspan = Math.min(colspan, cm.length - col);\n\n                var row = Grid.getRow(child) || 0; //coerce NaN, undefined, null, 0 => 0\n                row = Math.min(row, rm.length - 1);\n\n                var rowspan = Grid.getRowSpan(child);\n                if (rowspan !== 0)\n                    rowspan = rowspan || 1; //coerce NaN, undefined, null => 1\n                rowspan = Math.min(rowspan, rm.length - row);\n\n                for (var i = 0; i < col; i++) {\n                    childRect.x += cm[i][i].offered;\n                }\n                for (var i = col; i < col + colspan; i++) {\n                    childRect.width += cm[i][i].offered;\n                }\n\n                for (var i = 0; i < row; i++) {\n                    childRect.y += rm[i][i].offered;\n                }\n                for (var i = row; i < row + rowspan; i++) {\n                    childRect.height += rm[i][i].offered;\n                }\n            },\n        };\n    }\n\n    function originalToOffered(matrix: Segment[][]) {\n        for (var i = 0; i < matrix.length; i++) {\n            for (var j = 0; j <= i; j++) {\n                matrix[i][j].offered = matrix[i][j].original;\n            }\n        }\n    }\n}","namespace mirage.grid.design {\r\n    export interface IGridChildShape {\r\n        col: number;\r\n        row: number;\r\n        colspan: number;\r\n        rowspan: number;\r\n\r\n        hasAutoAuto: boolean;\r\n        hasStarAuto: boolean;\r\n        hasAutoStar: boolean;\r\n\r\n        init (child: core.LayoutNode, cm: Segment[][], rm: Segment[][]);\r\n        shouldMeasurePass (pass: MeasureOverridePass): boolean;\r\n        calcConstraint (pass: MeasureOverridePass, gridHasAutoStar: boolean, cm: Segment[][], rm: Segment[][]): ISize;\r\n    }\r\n\r\n    export function NewGridChildShape(): IGridChildShape {\r\n        let starRow = false;\r\n        let autoRow = false;\r\n        let starCol = false;\r\n        let autoCol = false;\r\n\r\n        let col = 0;\r\n        let row = 0;\r\n        let colspan = 1;\r\n        let rowspan = 1;\r\n\r\n        let dopass = MeasureOverridePass.autoAuto;\r\n\r\n        function getConstraintInitialSize(pass: MeasureOverridePass, gridHasAutoStar: boolean): ISize {\r\n            switch (pass) {\r\n                case MeasureOverridePass.autoAuto:\r\n                    return new Size(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\r\n                case MeasureOverridePass.starAuto:\r\n                    return new Size(\r\n                        Number.POSITIVE_INFINITY,\r\n                        gridHasAutoStar ? Number.POSITIVE_INFINITY : 0\r\n                    );\r\n                case MeasureOverridePass.starAutoAgain:\r\n                    return new Size(Number.POSITIVE_INFINITY, 0);\r\n                case MeasureOverridePass.autoStar:\r\n                    return new Size(0, Number.POSITIVE_INFINITY);\r\n                case MeasureOverridePass.nonStar:\r\n                    return new Size(\r\n                        autoCol ? Number.POSITIVE_INFINITY : 0,\r\n                        autoRow ? Number.POSITIVE_INFINITY : 0\r\n                    );\r\n            }\r\n            return new Size();\r\n        }\r\n\r\n        return {\r\n            col: 0,\r\n            row: 0,\r\n            colspan: 1,\r\n            rowspan: 1,\r\n            hasAutoAuto: false,\r\n            hasStarAuto: false,\r\n            hasAutoStar: false,\r\n            init(child: core.LayoutNode, cm: Segment[][], rm: Segment[][]) {\r\n                col = Math.min(Math.max(0, Grid.getColumn(child) || 0), cm.length - 1);\r\n                row = Math.min(Math.max(0, Grid.getRow(child) || 0), rm.length - 1);\r\n                colspan = Math.min(Math.max(1, Grid.getColumnSpan(child) || 0), cm.length - col);\r\n                rowspan = Math.min(Math.max(1, Grid.getRowSpan(child) || 0), cm.length - col);\r\n\r\n                this.col = col;\r\n                this.row = row;\r\n                this.colspan = colspan;\r\n                this.rowspan = rowspan;\r\n\r\n                starRow = autoRow = starCol = autoCol = false;\r\n                for (let i = row; i < row + rowspan; i++) {\r\n                    starRow = starRow || (rm[i][i].type === GridUnitType.star);\r\n                    autoRow = autoRow || (rm[i][i].type === GridUnitType.auto);\r\n                }\r\n                for (let i = col; i < col + colspan; i++) {\r\n                    starCol = starCol || (cm[i][i].type === GridUnitType.star);\r\n                    autoCol = autoCol || (cm[i][i].type === GridUnitType.auto);\r\n                }\r\n\r\n                this.hasAutoAuto = autoRow && autoCol && !starRow && !starCol;\r\n                this.hasStarAuto = starRow && autoCol;\r\n                this.hasAutoStar = autoRow && starCol;\r\n\r\n                if (autoRow && autoCol && !starRow && !starCol) {\r\n                    dopass = MeasureOverridePass.autoAuto;\r\n                } else if (starRow && autoCol && !starCol) {\r\n                    dopass = MeasureOverridePass.starAuto;\r\n                } else if (autoRow && starCol && !starRow) {\r\n                    dopass = MeasureOverridePass.autoStar;\r\n                } else if (!(starRow || starCol)) {\r\n                    dopass = MeasureOverridePass.nonStar;\r\n                } else {\r\n                    dopass = MeasureOverridePass.remainingStar;\r\n                }\r\n            },\r\n            shouldMeasurePass(pass: MeasureOverridePass): boolean {\r\n                return dopass === pass\r\n                    || (pass === MeasureOverridePass.starAutoAgain && dopass === MeasureOverridePass.starAuto);\r\n            },\r\n            calcConstraint (pass: MeasureOverridePass, gridHasAutoStar: boolean, cm: Segment[][], rm: Segment[][]): ISize {\r\n                let childSize = getConstraintInitialSize(pass, gridHasAutoStar);\r\n                for (let i = col; i < col + colspan; i++) {\r\n                    childSize.width += cm[i][i].offered;\r\n                }\r\n                for (let i = row; i < row + rowspan; i++) {\r\n                    childSize.height += rm[i][i].offered;\r\n                }\r\n                return childSize;\r\n            },\r\n        };\r\n    }\r\n}","namespace mirage.grid.design {\n    export interface IGridPlacement {\n        init();\n        add(isRow: boolean, start: number, span: number, size: number);\n        allocate(allocFunc: () => void);\n    }\n\n    interface IGridPlacementCell {\n        matrix: Segment[][];\n        start: number;\n        end: number;\n        size: number;\n    }\n\n    export function NewGridPlacement(cm: Segment[][], rm: Segment[][]): IGridPlacement {\n        var unicells: IGridPlacementCell[] = [];\n        var multicells: IGridPlacementCell[] = [];\n\n        return {\n            init() {\n                unicells.length = 0;\n                multicells.length = 0;\n            },\n            add(isRow: boolean, start: number, span: number, size: number) {\n                var item: IGridPlacementCell = {\n                    matrix: isRow ? rm : cm,\n                    start: start,\n                    end: start + span - 1,\n                    size: size,\n                };\n                if (item.start === item.end) {\n                    unicells.unshift(item);\n                } else {\n                    multicells.push(item);\n                }\n            },\n            allocate(allocFunc: () => void) {\n                var cell: IGridPlacementCell;\n                while ((cell = unicells.pop()) != null) {\n                    var i = cell.end;\n                    var j = cell.start;\n                    cell.matrix[i][j].desired = Math.max(cell.matrix[i][j].desired, cell.size);\n                    allocFunc();\n                }\n                while ((cell = multicells.pop()) != null) {\n                    var i = cell.end;\n                    var j = cell.start;\n                    cell.matrix[i][j].desired = Math.max(cell.matrix[i][j].desired, cell.size);\n                    allocFunc();\n                }\n            },\n        }\n    }\n}","namespace mirage.grid.design.helpers {\n    export function expand(available: number, mat: Segment[][]) {\n        for (var i = 0; i < mat.length; i++) {\n            var cur = mat[i][i];\n            if (cur.type === GridUnitType.star)\n                cur.offered = 0;\n            else\n                available = Math.max(available - cur.offered, 0);\n        }\n        assignSize(mat, 0, mat.length - 1, available, GridUnitType.star, false);\n\n        //TODO: setActualWidth, setActualHeight if star?\n    }\n\n    export function assignSize(mat: Segment[][], start: number, end: number, size: number, unitType: GridUnitType, desiredSize: boolean): number {\n        var count = 0;\n        var assigned = false;\n        var segmentSize = 0;\n        for (var i = start; i <= end; i++) {\n            let cur = mat[i][i];\n            segmentSize = desiredSize ? cur.desired : cur.offered;\n            if (segmentSize < cur.max)\n                count += (unitType === GridUnitType.star) ? cur.stars : 1;\n        }\n\n        do {\n            assigned = false;\n            let contribution = size / count;\n            for (var i = start; i <= end; i++) {\n                let cur = mat[i][i];\n                segmentSize = desiredSize ? cur.desired : cur.offered;\n                if (!(cur.type === unitType && segmentSize < cur.max))\n                    continue;\n                let newSize = segmentSize;\n                newSize += contribution * (unitType === GridUnitType.star ? cur.stars : 1);\n                newSize = Math.min(newSize, cur.max);\n                assigned = assigned || (newSize > segmentSize);\n                size -= newSize - segmentSize;\n                if (desiredSize)\n                    cur.desired = newSize;\n                else\n                    cur.offered = newSize;\n            }\n        } while (assigned);\n        return size;\n    }\n\n    export function calcDesiredToOffered(matrix: Segment[][]): number {\n        var total = 0;\n        for (var i = 0; i < matrix.length; i++) {\n            total += (matrix[i][i].offered = matrix[i][i].desired);\n        }\n        return total;\n    }\n}","namespace mirage.grid.design {\n    export interface IGridDesign {\n        measure: IGridMeasureDesign;\n        arrange: IGridArrangeDesign;\n    }\n\n    export function NewGridDesign(): IGridDesign {\n        var cm: Segment[][] = [];\n        var rm: Segment[][] = [];\n\n        return {\n            measure: NewGridMeasureDesign(cm, rm),\n            arrange: NewGridArrangeDesign(cm, rm),\n        };\n    }\n}","namespace mirage.grid.design {\n    export interface IGridMeasureDesign {\n        init(coldefs: IColumnDefinition[], rowdefs: IRowDefinition[], tree: IPanelTree);\n        beginPass(constraint: ISize);\n        measureChild(pass: MeasureOverridePass, index: number, child: core.LayoutNode);\n        endPass();\n        finish();\n        getDesired(): ISize;\n    }\n\n    export function NewGridMeasureDesign(cm: Segment[][], rm: Segment[][]): IGridMeasureDesign {\n        let gridHasAutoStar = false;\n        var childShapes: IGridChildShape[] = [];\n        var placement = NewGridPlacement(cm, rm);\n\n        return {\n            init(coldefs: IColumnDefinition[], rowdefs: IRowDefinition[], tree: IPanelTree) {\n                ensureMatrix(cm, !coldefs ? 1 : coldefs.length || 1);\n                ensureMatrix(rm, !rowdefs ? 1 : rowdefs.length || 1);\n                prepareCols(cm, coldefs);\n                prepareRows(rm, rowdefs);\n                syncChildShapes(childShapes, tree, cm, rm);\n                gridHasAutoStar = doesGridHaveAutoStar(childShapes);\n                placement.init();\n            },\n            beginPass(constraint: ISize) {\n                if (childShapes.length > 0) {\n                    helpers.expand(constraint.width, cm);\n                    helpers.expand(constraint.height, rm);\n                }\n            },\n            measureChild(pass: MeasureOverridePass, index: number, child: core.LayoutNode) {\n                var childShape = childShapes[index];\n                if (!childShape || !childShape.shouldMeasurePass(pass))\n                    return;\n                child.measure(childShape.calcConstraint(pass, gridHasAutoStar, cm, rm));\n\n                var desired = child.state.desiredSize;\n                if (pass !== MeasureOverridePass.starAuto)\n                    placement.add(true, childShape.row, childShape.rowspan, desired.height);\n                placement.add(false, childShape.col, childShape.colspan, desired.width);\n            },\n            endPass() {\n                placement.allocate(allocateDesiredSizeFunc(cm, rm));\n            },\n            finish() {\n                for (let i = 0; i < cm.length; i++) {\n                    for (let j = 0; j <= i; j++) {\n                        cm[i][j].original = cm[i][j].offered;\n                    }\n                }\n                for (let i = 0; i < rm.length; i++) {\n                    for (let j = 0; j <= i; j++) {\n                        rm[i][j].original = rm[i][j].offered;\n                    }\n                }\n            },\n            getDesired(): ISize {\n                let desired = new Size();\n                for (let i = 0; i < cm.length; i++) {\n                    desired.width += cm[i][i].desired;\n                }\n                for (let i = 0; i < rm.length; i++) {\n                    desired.height += rm[i][i].desired;\n                }\n                return desired;\n            },\n        }\n    }\n\n    var DEFAULT_GRID_LEN: IGridLength = {\n        value: 1.0,\n        type: GridUnitType.star\n    };\n\n    function ensureMatrix(matrix: Segment[][], defCount: number) {\n        if (matrix.length > defCount)\n            matrix.splice(defCount, matrix.length - defCount);\n        for (var i = 0; i < defCount; i++) {\n            if (matrix.length <= i)\n                matrix.push([]);\n            var mrow = matrix[i];\n            if (mrow.length > (i + 1))\n                mrow.splice(i, mrow.length - i - 1);\n            for (var ii = 0; ii <= i; ii++) {\n                if (mrow.length <= ii)\n                    mrow.push(new Segment());\n                else\n                    Segment.init(mrow[ii]);\n            }\n        }\n    }\n\n    function prepareCols(cm: Segment[][], coldefs: IColumnDefinition[]) {\n        if (!coldefs || coldefs.length === 0) {\n            let mcell = cm[0][0];\n            mcell.type = GridUnitType.star;\n            mcell.stars = 1.0;\n            return;\n        }\n\n        for (let i = 0; i < coldefs.length; i++) {\n            let colDef = coldefs[i];\n            let width = colDef.width || DEFAULT_GRID_LEN;\n\n            let cell = Segment.init(cm[i][i], 0.0, colDef.minWidth, colDef.maxWidth, width.type);\n            if (width.type === GridUnitType.pixel) {\n                cell.desired = cell.offered = cell.clamp(width.value);\n            } else if (width.type === GridUnitType.star) {\n                cell.stars = width.value;\n            } else if (width.type === GridUnitType.auto) {\n                cell.desired = cell.offered = cell.clamp(0);\n            }\n        }\n    }\n\n    function prepareRows(rm: Segment[][], rowdefs: IRowDefinition[]) {\n        if (!rowdefs || rowdefs.length === 0) {\n            let mcell = rm[0][0];\n            mcell.type = GridUnitType.star;\n            mcell.stars = 1.0;\n            return;\n        }\n\n        for (let i = 0; i < rowdefs.length; i++) {\n            let rowDef = rowdefs[i];\n            let height = rowDef.height || DEFAULT_GRID_LEN;\n\n            let cell = Segment.init(rm[i][i], 0.0, rowDef.minHeight, rowDef.maxHeight, height.type);\n            if (height.type === GridUnitType.pixel) {\n                cell.desired = cell.offered = cell.clamp(height.value);\n            } else if (height.type === GridUnitType.star) {\n                cell.stars = height.value;\n            } else if (height.type === GridUnitType.auto) {\n                cell.desired = cell.offered = cell.clamp(0);\n            }\n        }\n    }\n\n    function syncChildShapes(childShapes: IGridChildShape[], tree: IPanelTree, cm: Segment[][], rm: Segment[][]) {\n        let i = 0;\n        for (let walker = tree.walk(); walker.step(); i++) {\n            let childShape: IGridChildShape;\n            if (i < childShapes.length) {\n                childShape = childShapes[i] = childShapes[i] || NewGridChildShape();\n            } else {\n                childShapes.push(childShape = NewGridChildShape());\n            }\n            childShape.init(walker.current, cm, rm);\n        }\n        if (i < childShapes.length)\n            childShapes.slice(i, childShapes.length - i);\n    }\n\n    function allocateDesiredSizeFunc(cm: Segment[][], rm: Segment[][]): () => void {\n        function hasStarInSpan(mat: Segment[][], start: number, end: number): boolean {\n            var spansStar = false;\n            for (var i = start; i >= end; i--) {\n                spansStar = spansStar || mat[i][i].type === GridUnitType.star;\n            }\n            return spansStar;\n        }\n\n        function calcDesired(mat: Segment[][], start: number, end: number): number {\n            var total = 0;\n            for (var i = start; i >= end; i--) {\n                total += mat[i][i].desired;\n            }\n            return total;\n        }\n\n        function allocSegments(mat: Segment[][]) {\n            var count = mat.length;\n            for (var start = count - 1; start >= 0; start--) {\n                for (var end = start; end >= 0; end--) {\n                    let hasStar = hasStarInSpan(mat, start, end);\n                    let cur = mat[start][end].desired;\n                    let total = calcDesired(mat, start, end);\n                    let additional = cur - total;\n                    if (additional > 0) {\n                        if (hasStar) {\n                            helpers.assignSize(mat, end, start, additional, GridUnitType.star, true);\n                        } else {\n                            helpers.assignSize(mat, end, start, additional, GridUnitType.pixel, true);\n                            helpers.assignSize(mat, end, start, additional, GridUnitType.auto, true);\n                        }\n                    }\n                }\n            }\n        }\n\n        return function () {\n            // Allocate heights then widths\n            allocSegments(rm);\n            allocSegments(cm);\n\n            helpers.calcDesiredToOffered(rm);\n            helpers.calcDesiredToOffered(cm);\n        };\n    }\n\n    function doesGridHaveAutoStar(childShapes: IGridChildShape[]): boolean {\n        for (let i = 0; i < childShapes.length; i++) {\n            if (childShapes[i].hasAutoStar)\n                return true;\n        }\n        return false;\n    }\n}","namespace mirage.grid.design {\n    export enum MeasureOverridePass {\n        autoAuto, //Child in auto row, auto col\n        starAuto, //Child in star row, auto col\n        autoStar, //Child in auto row, star col\n        starAutoAgain, //star row, auto col repeated\n        nonStar, //Child in auto/pixel row, auto/pixel col\n        remainingStar, //Child in ?\n    }\n\n    export function NewMeasureOverridePass(pass: MeasureOverridePass, des: IGridMeasureDesign, tree: IPanelTree) {\n        return function (constraint: ISize) {\n            des.beginPass(constraint);\n            for (var walker = tree.walk(), i = 0; walker.step(); i++) {\n                des.measureChild(pass, i, walker.current);\n            }\n            des.endPass();\n        };\n    }\n}","module mirage.grid.design {\r\n    export class Segment {\r\n        desired: number = 0.0;\r\n        offered: number = 0.0;\r\n        original: number = 0.0;\r\n        min: number = 0.0;\r\n        max: number = Number.POSITIVE_INFINITY;\r\n        stars: number = 0;\r\n        type = GridUnitType.pixel;\r\n\r\n        clamp(value: number): number {\r\n            if (value < this.min)\r\n                return this.min;\r\n            if (value > this.max)\r\n                return this.max;\r\n            return value;\r\n        }\r\n\r\n        static init(segment: Segment, offered?: number, min?: number, max?: number, unitType?: GridUnitType): Segment {\r\n            segment.desired = 0.0;\r\n            segment.stars = 0;\r\n            segment.offered = offered || 0.0;\r\n            segment.min = min || 0.0;\r\n            segment.max = max != null ? max : Number.POSITIVE_INFINITY;\r\n            segment.type = unitType != null ? unitType : GridUnitType.pixel;\r\n\r\n            if (segment.offered < min)\r\n                segment.offered = min;\r\n            else if (segment.offered > max)\r\n                segment.offered = max;\r\n\r\n            return segment;\r\n        }\r\n    }\r\n}","module mirage.html {\r\n    export var version = '0.1.1';\r\n}","namespace mirage.html {\n    export interface IAnimClock {\n        enable();\n        disable();\n    }\n\n    export interface IAnimFrame {\n        (now: number, delta: number): void;\n    }\n\n    export function NewAnimClock(onFrame: IAnimFrame): IAnimClock {\n        let enabled = false;\n        let last = NaN;\n\n        function tick(now: number) {\n            if (!enabled)\n                return;\n            onFrame(now, isNaN(last) ? 0 : now - last);\n            last = now;\n            if (enabled)\n                window.requestAnimationFrame(tick);\n        }\n\n        return {\n            enable() {\n                enabled = true;\n                window.requestAnimationFrame(tick);\n            },\n            disable() {\n                enabled = false;\n                last = NaN;\n            },\n        };\n    }\n}","namespace mirage.html {\n    /*\n     The Binder binds a single mirage tree to a single DOM render tree.\n     Each DOM element tagged as mirage with a parent not marked as mirage will start a new binder.\n     This binding is a bidirectional communication channel.\n     - The render tree provides layout inputs and primitive measurements.\n     - The layout tree provides resulting slots (x, y, width, height) to place the absolute render elements.\n     */\n\n    export interface IBinder {\n        getRoot(): core.LayoutNode;\n        setRoot(node: core.LayoutNode);\n        run();\n    }\n\n    export function NewBinder(tree: ITreeTracker): IBinder {\n        let root: core.LayoutNode;\n        let element: HTMLElement;\n        let drafter: mirage.draft.IDrafter;\n        let updater: mirage.draft.IDraftUpdater = NewDraftUpdater(tree);\n        let lastDraftSize = new Size(NaN, NaN);\n\n        function getRootSize(): ISize {\n            let htmlHeight = root.getAttached(\"html.height\");\n            if (htmlHeight === \"window\")\n                return new Size(window.innerWidth, window.innerHeight - 20);\n            if (htmlHeight === \"infinite\")\n                return new Size(window.innerWidth, Number.POSITIVE_INFINITY);\n            return new Size(element.scrollWidth, element.scrollHeight);\n        }\n\n        return {\n            getRoot(): core.LayoutNode {\n                return root;\n            },\n            setRoot(node: core.LayoutNode) {\n                Size.undef(lastDraftSize);\n                root = node;\n                if (!node) {\n                    element = null;\n                    drafter = null;\n                } else {\n                    element = <HTMLElement>tree.getElementByNode(root);\n                    drafter = draft.NewDrafter(root);\n                }\n            },\n            run() {\n                let rootSize = getRootSize();\n                if (!Size.isEqual(lastDraftSize, rootSize)) {\n                    root.invalidateMeasure();\n                    Size.copyTo(rootSize, lastDraftSize);\n                }\n                if ((root.state.flags & mirage.core.LayoutFlags.hints) > 0) {\n                    drafter(updater, rootSize);\n                }\n            },\n        };\n    }\n}","namespace mirage.html {\n    /*\n     The Binder Registry is intended to track all Binders.\n     This is a singleton and will track all binders.\n     Additionally, it will adjust registered binders after a structural tree change.\n     */\n\n    export interface IBinderRegistry {\n        update(addedRoots: core.LayoutNode[], destroyedRoots: core.LayoutNode[]);\n    }\n\n    export function NewBinderRegistry(tree: ITreeTracker, binders?: IBinder[]): IBinderRegistry {\n        let roots: core.LayoutNode[] = [];\n        binders = binders || [];\n\n        function hoist(addedRoots: core.LayoutNode[], destroyedRoots: core.LayoutNode[]) {\n            // Hoist binders to the root\n            // This is done to ensure that a binder is the true root\n            // as a root may be slipped above an existing binder root\n            // Added roots will be stripped of hoisted roots from existing binders\n            for (var i = 0; i < binders.length; i++) {\n                let binder = binders[i];\n                let curRoot = binder.getRoot();\n                if (!curRoot) {\n                    // Dead binder, destroy it\n                    binders.splice(i, 1);\n                    i--;\n                    continue;\n                }\n                let newRoot = findRoot(curRoot);\n                if (curRoot !== newRoot) {\n                    replaceBinderRoot(binder, curRoot, newRoot, destroyedRoots);\n                }\n\n                // If this binder was taken over by newRoot and exists in addedRoots,\n                // we should remove so a duplicate binder isn't created\n                let existingIndex = addedRoots.indexOf(newRoot);\n                if (existingIndex > -1)\n                    addedRoots.splice(i, 1);\n            }\n        }\n\n        function findRoot(curRoot: core.LayoutNode): core.LayoutNode {\n            let newRoot = curRoot;\n            while (newRoot.tree.parent) {\n                newRoot = newRoot.tree.parent;\n            }\n            return newRoot;\n        }\n\n        function replaceBinderRoot(binder: IBinder, curRoot: core.LayoutNode, newRoot: core.LayoutNode, destroyedRoots: core.LayoutNode[]) {\n            // Replace this binder's root with newRoot\n\n            // If newRoot already has a binder, this binder should be destroyed\n            if (roots.indexOf(newRoot) > -1) {\n                destroyedRoots.push(curRoot);\n                return;\n            }\n\n            // stop tracking current root\n            let oldIndex = roots.indexOf(curRoot);\n            if (oldIndex > -1)\n                roots.splice(oldIndex, 1);\n\n            binder.setRoot(newRoot);\n            roots.push(newRoot);\n        }\n\n        function create(nodes: core.LayoutNode[]) {\n            for (var i = 0; i < nodes.length; i++) {\n                let node = nodes[i];\n                let binder = NewBinder(tree);\n                binder.setRoot(node);\n                roots.push(node);\n                binders.push(binder);\n            }\n        }\n\n        function destroy(destroyedRoots: core.LayoutNode[]) {\n            for (var i = 0; i < binders.length; i++) {\n                let index = destroyedRoots.indexOf(binders[i].getRoot());\n                if (index > -1) {\n                    destroyBinder(i);\n                    i--;\n                }\n            }\n        }\n\n        function destroyBinder(index: number) {\n            let binder = binders.splice(index, 1)[0];\n            let curRoot = binder.getRoot();\n            binder.setRoot(null);\n            if (curRoot) {\n                // Stop tracking this root as bound\n                let trackIndex = roots.indexOf(curRoot);\n                if (trackIndex > -1)\n                    roots.splice(trackIndex, 1);\n            }\n        }\n\n        return {\n            update(addedRoots: core.LayoutNode[], destroyedRoots: core.LayoutNode[]) {\n                hoist(addedRoots, destroyedRoots);\n                create(addedRoots);\n                destroy(destroyedRoots);\n            },\n        };\n    }\n}","namespace mirage.html {\n    /*\n     The DOM Monitor is intended to watch the entire DOM and filter for mirage-tagged elements.\n     It will report nodes added and removed as a result of DOM tree and attribute changes.\n     For instance, if someone deletes the `data-layout` attribute from a DOM element, it will be reported as removed.\n     */\n\n    export interface IDOMMonitor {\n        start();\n        stop();\n    }\n\n    export interface INodeMonitorUpdate {\n        (added: Element[], removed: Element[], untagged: Element[], changed: IDataLayoutChange[]): void;\n    }\n\n    export interface IDataLayoutChange {\n        target: Element;\n        oldValue: string;\n    }\n\n    export function isMirageElement(node: Node): boolean {\n        // Only consider element nodes\n        // Only consider nodes with 'data-layout'\n        // Attribute monitor will pick up added/removed attribute\n        return node.nodeType === node.ELEMENT_NODE\n            && !!(<Element>node).getAttribute(\"data-layout\");\n    }\n\n    export function NewDOMMonitor(target: Node, onUpdate: INodeMonitorUpdate): IDOMMonitor {\n        var observer = new MutationObserver(mutations => {\n            var added: Element[] = [];\n            var removed: Element[] = [];\n            var untagged: Element[] = [];\n            var changed: IDataLayoutChange[] = [];\n\n            let needsUpdate = false;\n            for (var i = 0; i < mutations.length; i++) {\n                let mutation = mutations[i];\n                if (HtmlNode.isDummyElement(mutation.target))\n                    continue;\n                if (mutation.type === \"childList\") {\n                    for (var j = 0; j < mutation.addedNodes.length; j++) {\n                        let el = mutation.addedNodes[j];\n                        if (isMirageElement(el)) {\n                            added.push(<Element>el);\n                            needsUpdate = true;\n                        }\n                    }\n                    for (var j = 0; j < mutation.removedNodes.length; j++) {\n                        let el = mutation.removedNodes[j];\n                        if (isMirageElement(el)) {\n                            removed.push(<Element>el);\n                            needsUpdate = true;\n                        }\n                    }\n                } else if (mutation.type === \"attributes\") {\n                    if (!mutation.oldValue) {\n                        if (isMirageElement(mutation.target)) {\n                            // 'data-layout' attribute added\n                            added.push(<Element>mutation.target);\n                            needsUpdate = true;\n                        }\n                    } else {\n                        if (!isMirageElement(mutation.target)) {\n                            // 'data-layout' attribute removed\n                            untagged.push(<Element>mutation.target);\n                            needsUpdate = true;\n                        } else {\n                            // 'data-layout' attribute changed\n                            changed.push({target: <Element>mutation.target, oldValue: mutation.oldValue});\n                            needsUpdate = true;\n                        }\n                    }\n                }\n            }\n\n            if (needsUpdate) {\n                onUpdate(added, removed, untagged, changed);\n            }\n        });\n\n        return {\n            start() {\n                observer.observe(target, {\n                    childList: true,\n                    subtree: true,\n                    attributes: true,\n                    attributeOldValue: true,\n                    attributeFilter: [\"data-layout\"],\n                });\n            },\n            stop() {\n                observer.disconnect();\n            },\n        };\n    }\n}","namespace mirage.html {\n    export function NewDraftUpdater(tree: ITreeTracker): mirage.draft.IDraftUpdater {\n        function updateSlot(el: HTMLElement, slot: IRect) {\n            el.style.position = \"absolute\";\n            el.style.left = `${slot.x}px`;\n            el.style.top = `${slot.y}px`;\n            el.style.width = `${slot.width}px`;\n            el.style.height = `${slot.height}px`;\n            el.style.boxSizing = \"border-box\";\n        }\n\n        return {\n            updateSlots(updates: draft.ISlotUpdate[]) {\n                for (var i = 0; i < updates.length; i++) {\n                    let update = updates[i];\n                    let node = update.node;\n\n                    let el = <HTMLElement>tree.getElementByNode(update.node);\n                    el.style.display = \"none\";\n                    if (node.tree.parent)\n                        updateSlot(<HTMLElement>tree.getElementByNode(update.node), update.newRect);\n                    el.style.display = \"\";\n                }\n            },\n        };\n    }\n}","namespace mirage.html {\n    /*\n     The Element Translator translates the data-layout attribute into a layout node\n     If it is detected that \"type\" changed during a data-layout change,\n     a new filled layout node will be returned, but not replaced in the layout tree\n     During any translation, if null is returned, the node should be destroyed\n     */\n\n    export interface IElementTranslator {\n        translateNew(el: Element): core.LayoutNode;\n        translateChange(el: Element, node: core.LayoutNode, oldDataLayout: string): core.LayoutNode;\n    }\n    interface IDataLayoutHash {\n        [property: string]: string;\n    }\n    export function NewElementTranslator(): IElementTranslator {\n        function parseDataLayout(dataLayout: string): IDataLayoutHash {\n            let hash: IDataLayoutHash = {};\n            for (let tokens = dataLayout.split(\";\"), i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                let index = token.indexOf(':');\n                if (index < 0)\n                    continue;\n                hash[token.substr(0, index).trim()] = token.substr(index + 1).trim();\n            }\n            return hash;\n        }\n\n        function applyHash(node: core.LayoutNode, hash: IDataLayoutHash) {\n            for (let keys = Object.keys(hash), i = 0; i < keys.length; i++) {\n                let key = keys[i];\n                let mapper = mirage.map.getMapper(key);\n                if (mapper)\n                    mapper(node, hash[key]);\n            }\n        }\n\n        return {\n            translateNew(el: Element): core.LayoutNode {\n                let hash = parseDataLayout(el.getAttribute(\"data-layout\"));\n                let type = hash[\"type\"];\n                if (!type)\n                    return null;\n                let node = mirage.createNodeByType(type);\n                if (type === \"html\")\n                    HtmlNode.setElement(node, <HTMLElement>el);\n                applyHash(node, hash);\n                return node;\n            },\n            translateChange(el: Element, node: core.LayoutNode, oldDataLayout: string): core.LayoutNode {\n                let oldHash = parseDataLayout(oldDataLayout);\n                let newHash = parseDataLayout(el.getAttribute(\"data-layout\"));\n                let newType = newHash[\"type\"];\n                if (!newType)\n                    return null;\n                if (oldHash[\"type\"] !== newType) {\n                    let newNode = mirage.createNodeByType(newType);\n                    applyHash(newNode, newHash);\n                    return newNode;\n                }\n\n                // Unset values that exist in old, but not in new\n                let oldKeys = Object.keys(oldHash);\n                let newKeys = Object.keys(newHash);\n                for (let i = 0; i < oldKeys.length; i++) {\n                    let key = oldKeys[i];\n                    if (newKeys.indexOf(key) > -1)\n                        continue;\n                    let mapper = mirage.map.getMapper(key);\n                    if (mapper)\n                        mapper(node, undefined);\n                }\n\n                applyHash(node, newHash);\n                return node;\n            },\n        };\n    }\n}","namespace mirage.html {\n    var orchestrator: html.IOrchestrator;\n\n    export function watch(target?: Node) {\n        target = target || document.body;\n        orchestrator = html.NewOrchestrator(target);\n        orchestrator.start();\n    }\n\n    export function getRoots(): core.LayoutNode[] {\n        return orchestrator.binders.map(binder => binder.getRoot());\n    }\n\n    export function getLayoutNode(obj: Element | string): core.LayoutNode {\n        let el: Element;\n        if (typeof obj === \"string\") {\n            el = document.getElementById(obj);\n        } else {\n            el = obj;\n        }\n        return el ? orchestrator.tree.getNodeByElement(el) : null;\n    }\n\n    export function dumpLayoutTree(root: core.LayoutNode, indent?: string): string {\n        let s = \"\";\n        if (!indent) {\n            s += \"\\n\";\n            indent = \"\";\n        }\n        let ctor = root.constructor;\n        s += indent + (<any>ctor).name.toString() + \"\\n\";\n        for (let walker = root.tree.walk(); walker.step();) {\n            s += dumpLayoutTree(walker.current, indent + \"  \");\n        }\n        return s;\n    }\n\n    export function enableLogging() {\n        mirage.logger = mirage.logging.NewConsoleLogger(node => {\n            let el = orchestrator.tree.getElementByNode(node);\n            let id = el && el.id ? `#${el.id}` : \"\";\n            let type = <any>node.constructor;\n            return `${type.name}${id}`;\n        });\n    }\n}","namespace mirage.html {\n    let dummy: HTMLElement;\n\n    export class HtmlNode extends core.LayoutNode {\n        static getElement(node: core.LayoutNode): HTMLElement {\n            return node.getAttached(\"html-element\");\n        }\n\n        static setElement(node: core.LayoutNode, el: HTMLElement) {\n            node.setAttached(\"html-element\", el);\n            node.invalidateMeasure();\n        }\n\n        protected measureOverride(constraint: ISize): ISize {\n            let el = HtmlNode.getElement(this);\n            return el ? calcElementDesired(el, constraint) : new Size();\n        }\n\n        protected arrangeOverride(arrangeSize: ISize): ISize {\n            return arrangeSize;\n        }\n\n        static isDummyElement(el: Node): boolean {\n            return el === dummy;\n        }\n    }\n    registerNodeType(\"html\", HtmlNode);\n\n    function calcElementDesired(el: HTMLElement, constraint: ISize): ISize {\n        if (!dummy) {\n            dummy = document.createElement('div');\n            dummy.id = \"mirage-dummy\";\n            dummy.style.position = \"absolute\";\n            dummy.style.boxSizing = \"border-box\";\n            dummy.style.display = \"none\";\n            document.body.appendChild(dummy);\n        }\n\n        dummy.style.width = isFinite(constraint.width) ? `${constraint.width}px` : \"\";\n        dummy.style.height = isFinite(constraint.height) ? `${constraint.height}px` : \"\";\n        dummy.style.display = \"\";\n\n        dummy.innerHTML = el.outerHTML;\n        let clone = <HTMLElement>dummy.firstElementChild;\n        clone.style.display = \"\";\n        let bounds = clone.getBoundingClientRect();\n        dummy.innerHTML = \"\";\n\n        dummy.style.display = \"none\";\n\n        return new Size(bounds.width, bounds.height);\n    }\n}","namespace mirage.html {\n    export interface IOrchestrator {\n        tree: ITreeTracker;\n        binders: IBinder[];\n        registry: IBinderRegistry;\n        sync: ITreeSynchronizer;\n        start();\n        stop();\n    }\n\n    export function NewOrchestrator(target: Node): IOrchestrator {\n        let tree = NewTreeTracker();\n        let binders: IBinder[] = [];\n        let registry = NewBinderRegistry(tree, binders);\n        let sync = NewTreeSynchronizer(target, tree, registry);\n        let clock = NewAnimClock(onFrame);\n\n        function onFrame(now: number, delta: number) {\n            for (let i = 0; i < binders.length; i++) {\n                binders[i].run();\n            }\n        }\n\n        return {\n            tree: tree,\n            binders: binders,\n            registry: registry,\n            sync: sync,\n            start() {\n                sync.start(true);\n                clock.enable();\n            },\n            stop() {\n                clock.disable();\n                sync.stop();\n            },\n        };\n    }\n}","namespace mirage.html {\n    /*\n     When running tree synchronization, child nodes can appear out of order\n     The Panel Inserter will track items in escrow\n     When ready to commit, each item will be inserted into the proper index\n     */\n\n    export interface IPanelInserter {\n        add(panel: Panel, el: Element, node: core.LayoutNode);\n        commit();\n    }\n\n    interface IPanelInsertItem {\n        panel: Panel;\n        entries: IPanelInsertItemEntry[];\n    }\n    interface IPanelInsertItemEntry {\n        node: core.LayoutNode;\n        index: number;\n    }\n\n    export function NewPanelInserter(): IPanelInserter {\n        var items: IPanelInsertItem[] = [];\n\n        return {\n            add(panel: Panel, el: Element, node: core.LayoutNode) {\n                let item = panel.getAttached(\"html-sync-escrow\");\n                if (!item) {\n                    item = {\n                        panel: panel,\n                        entries: [],\n                    };\n                    panel.setAttached(\"html-sync-escrow\", item);\n                    items.push(item);\n                }\n\n                item.entries.push({\n                    node: node,\n                    index: Array.prototype.indexOf.call(el.parentElement.children, el),\n                });\n            },\n            commit() {\n                for (var i = 0; i < items.length; i++) {\n                    let item = items[i];\n                    let panel = item.panel;\n                    let entries = item.entries;\n                    panel.setAttached(\"html-sync-escrow\", undefined);\n                    entries.sort((a, b) => a.index - b.index);\n                    let inserted: core.LayoutNode[] = [];\n                    for (var j = 0; j < entries.length; j++) {\n                        let entry = entries[j];\n                        // deduplicate entries\n                        if (inserted.indexOf(entry.node) > -1)\n                            continue;\n                        inserted.push(entry.node);\n                        panel.insertChild(entry.node, entry.index);\n                    }\n                }\n            },\n        };\n    }\n}","namespace mirage.html {\n    /*\n     The Tree Synchronizer tracks added/removed DOM elements.\n     It is responsible for synchronizing the render tree with the layout tree.\n     It also detects mirage roots and builds binders.\n     */\n\n    export interface ITreeSynchronizer {\n        start(initialize: boolean);\n        stop();\n    }\n\n    export function NewTreeSynchronizer(target: Node, tree?: ITreeTracker, registry?: IBinderRegistry, translator?: IElementTranslator): ITreeSynchronizer {\n        tree = tree || NewTreeTracker();\n        registry = registry || NewBinderRegistry(tree);\n        translator = translator || NewElementTranslator();\n\n        function mirrorAdded(added: Element[]) {\n            // Mirror new render elements to layout tree\n            for (var i = 0; i < added.length; i++) {\n                register(added[i]);\n            }\n        }\n\n        function mirrorUntagged(untagged: Element[], addedRoots: core.LayoutNode[], destroyedRoots: core.LayoutNode[]) {\n            // Mirror nodes that have been untagged, but remain in DOM\n            for (var i = 0; i < untagged.length; i++) {\n                deregister(untagged[i], true, addedRoots, destroyedRoots);\n            }\n        }\n\n        function mirrorRemoved(removed: Element[], addedRoots: core.LayoutNode[], destroyedRoots: core.LayoutNode[]) {\n            // Mirror old render elements from layout tree\n            // Adds nodes to addedRoots that were orphaned by destroying a root\n            // Adds nodes to destroyedRoots that were destroyed mirage parents\n            for (var i = 0; i < removed.length; i++) {\n                deregister(removed[i], false, addedRoots, destroyedRoots);\n            }\n        }\n\n        function register(el: Element) {\n            if (tree.elementExists(el) || !isMirageElement(el))\n                return;\n            // The parent may not be mirrored in the layout tree yet\n            // We will set parent after all adds/removes have completed\n            let node = translator.translateNew(el);\n            if (!node) {\n                // we could not detect node, it will not be created\n                return;\n            }\n            tree.add(el, node);\n\n            // register children\n            for (let cur = el.firstElementChild; !!cur; cur = cur.nextElementSibling) {\n                register(cur);\n            }\n        }\n\n        function deregister(el: Element, isUntagged: boolean, addedRoots: core.LayoutNode[], destroyedRoots: core.LayoutNode[]) {\n            let node = tree.removeElement(el);\n            if (!node)\n                return;\n            if (!isUntagged) {\n                // deregister children\n                for (let cur = el.firstElementChild; !!cur; cur = cur.nextElementSibling) {\n                    deregister(cur, true, null, null);\n                }\n            } else {\n                // drop 'parent' from children\n                for (let walker = node.tree.walk(); walker.step();) {\n                    walker.current.setParent(null);\n                }\n            }\n\n            let parentNode = node.tree.parent;\n            if (!parentNode) {\n                destroyedRoots.push(node);\n                promoteChildren(el, addedRoots);\n            }\n\n            if (parentNode instanceof Panel) {\n                parentNode.removeChild(node);\n            } else {\n                node.setParent(null);\n            }\n        }\n\n        function promoteChildren(el: Element, addedRoots: core.LayoutNode[]) {\n            for (let cur = el.firstElementChild; !!cur; cur = cur.nextElementSibling) {\n                if (isMirageElement(cur)) {\n                    addedRoots.push(tree.getNodeByElement(cur));\n                } else {\n                    promoteChildren(cur, addedRoots);\n                }\n            }\n        }\n\n        function mirrorTranslations(changes: IDataLayoutChange[], addedRoots: core.LayoutNode[], destroyedRoots: core.LayoutNode[]) {\n            for (let i = 0; i < changes.length; i++) {\n                let change = changes[i];\n                let node = tree.getNodeByElement(change.target);\n                let result = translator.translateChange(change.target, node, change.oldValue);\n                if (result !== node) {\n                    // destroy old node, rehook parent/children to new node\n                    replaceNode(node, result, addedRoots, destroyedRoots);\n                } else if (!result) {\n                    // destroy this node, deregister will also hoist children properly\n                    deregister(change.target, true, addedRoots, destroyedRoots);\n                }\n            }\n        }\n\n        function replaceNode(oldNode: core.LayoutNode, newNode: core.LayoutNode, addedRoots: core.LayoutNode[], destroyedRoots: core.LayoutNode[]) {\n            let uid = tree.replaceNode(oldNode, newNode);\n            if (!uid) // old node does not exist, what should we do?\n                return;\n\n            // Adjust parent's children\n            let parentNode = oldNode.tree.parent;\n            if (parentNode instanceof Panel) {\n                let index = parentNode.indexOfChild(oldNode);\n                parentNode.removeChild(oldNode);\n                parentNode.insertChild(newNode, index);\n            } else if (!parentNode) {\n                destroyedRoots.push(oldNode);\n                addedRoots.push(newNode);\n            } else {\n                oldNode.setParent(null);\n                newNode.setParent(parentNode);\n            }\n\n            // Migrate old children to new node\n            if (newNode instanceof Panel) {\n                for (let walker = oldNode.tree.walk(); walker.step();) {\n                    newNode.appendChild(walker.current);\n                }\n                if (oldNode instanceof Panel)\n                    oldNode.tree.children.length = 0;\n            }\n        }\n\n        function mirrorAncestry(added: Element[], addedRoots: core.LayoutNode[], inserter: IPanelInserter) {\n            // Configure parents after all layout nodes have been created/destroyed\n            // This is done to ensure parent layout nodes exist\n            // Adds nodes to addedRoots that do not have mirage parents\n            for (var i = 0; i < added.length; i++) {\n                let el = added[i];\n                let node = tree.getNodeByElement(el);\n                if (!node)\n                    continue;\n                // coerce 'none' to null\n                let parentNode = (el.parentElement ? tree.getNodeByElement(el.parentElement) : null) || null;\n                if (parentNode instanceof Panel) {\n                    // To ensure proper ordering, we will collect all new children for each parent\n                    // We will insert the children in sorted order\n                    inserter.add(parentNode, el, node);\n                } else {\n                    node.setParent(parentNode);\n                }\n                if (!node.tree.parent) {\n                    addedRoots.push(node);\n                }\n                configAncestors(el, node, inserter);\n            }\n        }\n\n        function configAncestors(parentEl: Element, parentNode: core.LayoutNode, inserter: IPanelInserter) {\n            for (let cur = parentEl.firstElementChild, i = 0; !!cur; cur = cur.nextElementSibling, i++) {\n                let curNode = tree.getNodeByElement(cur);\n                if (curNode && !curNode.tree.parent) {\n                    if (parentNode instanceof Panel) {\n                        inserter.add(parentNode, cur, curNode);\n                    } else {\n                        curNode.setParent(parentNode);\n                    }\n                    configAncestors(cur, curNode, inserter);\n                }\n            }\n        }\n\n        /*\n         Each update, we need to\n         - construct new layout nodes mirroring new render elements\n         - detach layout nodes mirroring old render elements\n         - run data-layout translation changes\n         - configure all new layout nodes with parent\n         - hoist binders to the true root\n         - add binders for new root nodes\n         */\n        function update(added: Element[], removed: Element[], untagged: Element[], changed: IDataLayoutChange[]) {\n            let inserter = NewPanelInserter();\n            let addedRoots: core.LayoutNode[] = [];\n            let destroyedRoots: core.LayoutNode[] = [];\n\n            mirrorAdded(added);\n            mirrorUntagged(untagged, addedRoots, destroyedRoots);\n            mirrorRemoved(removed, addedRoots, destroyedRoots);\n            mirrorTranslations(changed, addedRoots, destroyedRoots);\n            mirrorAncestry(added, addedRoots, inserter);\n\n            inserter.commit();\n            registry.update(addedRoots, destroyedRoots);\n        }\n\n        function init() {\n            let added: Element[] = [];\n            scan(<Element>target, added, false);\n            update(added, [], [], []);\n        }\n\n        function scan(el: Element, added: Element[], parentIsMirage: boolean) {\n            let isMirage = isMirageElement(el);\n            if (isMirage && !parentIsMirage)\n                added.push(el);\n            for (let cur = el.firstElementChild; !!cur; cur = cur.nextElementSibling) {\n                scan(cur, added, isMirage);\n            }\n        }\n\n        var monitor = NewDOMMonitor(target, update);\n        return {\n            start(initialize: boolean) {\n                if (initialize)\n                    init();\n                monitor.start();\n            },\n            stop() {\n                monitor.stop();\n            },\n        };\n    }\n}","namespace mirage.html {\n    /*\n     The Tree Tracker tracks render elements (DOM) and layout nodes (mirage).\n     This is a singleton and tracks the entire DOM.\n     Instead of doing lookups using a synchronized double-array, we are tracking a uid on each object.\n     The render element and layout node can be retrieved by uid.\n     We use a DOM attribute ('http://schemas.wsick.com/mirage/html':uid)\n     and a layout node attached property ('mirage-uid') to track the uid.\n     This uid is a running int counter that is converted to a string to match attributes.\n     */\n\n    var XMLNS = \"http://schemas.wsick.com/mirage/html\";\n\n    export interface ITreeTracker {\n        add(el: Element, node: core.LayoutNode): string;\n        replaceNode(oldNode: core.LayoutNode, newNode: core.LayoutNode): string;\n        removeElement(el: Element): core.LayoutNode;\n        elementExists(el: Element): boolean;\n        getNodeByElement(el: Element): core.LayoutNode;\n        getElementByNode(node: core.LayoutNode): Element;\n    }\n\n    interface IElementHash {\n        [uid: string]: Element;\n    }\n    interface ILayoutNodeHash {\n        [uid: string]: core.LayoutNode;\n    }\n\n    export function NewTreeTracker(): ITreeTracker {\n        var elements: IElementHash = {};\n        var nodes: ILayoutNodeHash = {};\n        var lastUid = 0;\n\n        return {\n            add(el: Element, node: core.LayoutNode): string {\n                lastUid++;\n                var uid = lastUid.toString();\n                el.setAttributeNS(XMLNS, \"uid\", uid);\n                node.setAttached(\"mirage-uid\", uid);\n                elements[uid] = el;\n                nodes[uid] = node;\n                return uid;\n            },\n            replaceNode(oldNode: core.LayoutNode, newNode: core.LayoutNode): string {\n                let uid = oldNode.getAttached(\"mirage-uid\");\n                if (nodes[uid] === oldNode) {\n                    oldNode.setAttached(\"mirage-uid\", undefined);\n                    newNode.setAttached(\"mirage-uid\", uid);\n                    nodes[uid] = newNode;\n                    return uid;\n                }\n                return \"\";\n            },\n            removeElement(el: Element): core.LayoutNode {\n                var uid = el.getAttributeNS(XMLNS, \"uid\");\n                var node = !uid ? null : nodes[uid];\n                el.removeAttributeNS(XMLNS, \"uid\");\n                if (node) {\n                    node.setAttached(\"mirage-uid\", undefined);\n                    delete elements[uid];\n                    delete nodes[uid];\n                }\n                return node;\n            },\n            elementExists(el: Element): boolean {\n                var uid = el.getAttributeNS(XMLNS, \"uid\");\n                return elements[uid] === el;\n            },\n            getNodeByElement(el: Element): core.LayoutNode {\n                var uid = el.getAttributeNS(XMLNS, \"uid\");\n                return nodes[uid];\n            },\n            getElementByNode(node: core.LayoutNode): Element {\n                var uid = node.getAttached(\"mirage-uid\");\n                return elements[uid];\n            },\n        };\n    }\n\n    export function getNodeUid(node: core.LayoutNode): string {\n        return node.getAttached(\"mirage-uid\");\n    }\n}"]}