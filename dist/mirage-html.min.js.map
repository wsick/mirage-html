{"version":3,"sources":["_version.ts","sync/IDOMMonitor.ts"],"names":["mirage","mirage.html","mirage.html.sync","mirage.html.sync.NewDOMMonitor","mirage.html.sync.NewDOMMonitor.nodeHasLayoutAttr","mirage.html.sync.NewDOMMonitor.addElement","mirage.html.sync.NewDOMMonitor.removeElement","mirage.html.sync.NewDOMMonitor.start","mirage.html.sync.NewDOMMonitor.stop"],"mappings":"AAAA,GAAOA,SAAP,SAAOA,GAAOA,GAAAA,IAAAA,SAAAA,GACCC,EAAAA,QAAUA,SADXD,EAAAA,EAAAA,OAAAA,EAAAA,WAAPA,SAAAA,WCAP,IAAUA,SAAV,SAAUA,GAAOA,GAAAA,IAAAA,SAAAA,GAAKC,GAAAA,IAAAA,SAAAA,GAMlBC,QAAAA,GAA8BA,EAAcA,EAAiDA,GACzFC,QAAAA,GAA2BA,GACvBC,QAAmBA,EAAMA,aAAaA,eAG1CD,QAAAA,GAAoBA,EAAYA,GAExBE,EAAKA,WAAaA,EAAKA,cAItBA,EAAkBA,IAEvBA,EAAYA,EAAMA,GAGtBF,QAAAA,GAAuBA,EAAYA,GAE3BG,EAAKA,WAAaA,EAAKA,cAItBA,EAAkBA,IAEvBA,EAAcA,EAAMA,GAGxBH,GAAIA,GAAWA,GAAIA,kBAAiBA,SAAAA,GAChCA,IAAKA,GAAIA,GAAIA,EAAGA,EAAIA,EAAUA,OAAQA,IAAKA,CACvCA,GAAIA,GAAWA,EAAUA,EACzBA,IAAsBA,cAAlBA,EAASA,KAAsBA,CAC/BA,IAAKA,GAAIA,GAAIA,EAAGA,EAAIA,EAASA,WAAWA,OAAQA,IAC5CA,EAAWA,EAASA,WAAWA,GAAIA,EAASA,OAEhDA,KAAKA,GAAIA,GAAIA,EAAGA,EAAIA,EAASA,aAAaA,OAAQA,IAC9CA,EAAcA,EAASA,aAAaA,GAAIA,EAASA,YAE5BA,eAAlBA,EAASA,OACXA,EAASA,SAMLA,EAAkBA,EAASA,SAE5BA,EAAcA,EAASA,OAAQA,EAASA,OAAOA,eAP/CA,EAAkBA,EAASA,SAE3BA,EAAWA,EAASA,OAAQA,EAASA,OAAOA,kBAYhEA,QACIA,MAAKA,WACDI,EAASA,QAAQA,GACbA,WAAWA,EACXA,SAASA,EACTA,YAAYA,EACZA,mBAAmBA,EACnBA,iBAAkBA,kBAG1BJ,KAAIA,WACAK,EAASA,eAhELN,EAAAA,cAAaA,GANXD,EAAAA,EAAAA,OAAAA,EAAAA,WAALD,EAAAA,EAAAA,OAAAA,EAAAA,WAAPA,SAAAA","file":"mirage-html.min.js","sourcesContent":["module mirage.html {\r\n    export var version = '0.1.0';\r\n}\r\n","namespace mirage.html.sync {\n    export interface IDOMMonitor {\n        start();\n        stop();\n    }\n\n    export function NewDOMMonitor(target: Node, onNodeAdded: (node: Node, parent: Node) => void, onNodeRemoved: (node: Node, parent: Node) => void): IDOMMonitor {\n        function nodeHasLayoutAttr(node: Node): boolean {\n            return !!(<Element>node).getAttribute(\"data-layout\");\n        }\n\n        function addElement(node: Node, parent: Node) {\n            // Only consider element nodes\n            if (node.nodeType !== node.ELEMENT_NODE)\n                return;\n            // Only consider nodes with 'data-layout'\n            // Attribute monitor will pick up added nodes that add attr later\n            if (!nodeHasLayoutAttr(node))\n                return;\n            onNodeAdded(node, parent);\n        }\n\n        function removeElement(node: Node, parent: Node) {\n            // Only consider element nodes\n            if (node.nodeType !== node.ELEMENT_NODE)\n                return;\n            // Only consider nodes with 'data-layout'\n            // Attribute monitor will pick up removed nodes that previously remove attr\n            if (!nodeHasLayoutAttr(node))\n                return;\n            onNodeRemoved(node, parent);\n        }\n\n        var observer = new MutationObserver(mutations => {\n            for (var i = 0; i < mutations.length; i++) {\n                let mutation = mutations[i];\n                if (mutation.type === \"childList\") {\n                    for (var j = 0; j < mutation.addedNodes.length; j++) {\n                        addElement(mutation.addedNodes[j], mutation.target);\n                    }\n                    for (var j = 0; j < mutation.removedNodes.length; j++) {\n                        removeElement(mutation.removedNodes[j], mutation.target);\n                    }\n                } else if (mutation.type === \"attributes\") {\n                    if (!mutation.oldValue) {\n                        if (nodeHasLayoutAttr(mutation.target)) {\n                            // 'data-layout' attribute added\n                            addElement(mutation.target, mutation.target.parentElement);\n                        }\n                    } else {\n                        if (!nodeHasLayoutAttr(mutation.target)) {\n                            // 'data-layout' attribute removed\n                            removeElement(mutation.target, mutation.target.parentElement);\n                        }\n                    }\n                }\n            }\n        });\n\n        return {\n            start() {\n                observer.observe(target, {\n                    childList: true,\n                    subtree: true,\n                    attributes: true,\n                    attributeOldValue: true,\n                    attributeFilter: [\"data-layout\"],\n                });\n            },\n            stop() {\n                observer.disconnect();\n            },\n        };\n    }\n}"],"sourceRoot":"/mirage"}